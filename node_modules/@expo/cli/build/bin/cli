#!/usr/bin/env node
"use strict";
var _arg = _interopRequireDefault(require("arg"));
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const defaultCmd = "start";
const commands = {
    // Add a new command here
    "run:ios": ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/run/ios"));
        }).then((i)=>i.expoRunIos
        )
    ,
    "run:android": ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/run/android"));
        }).then((i)=>i.expoRunAndroid
        )
    ,
    start: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/start"));
        }).then((i)=>i.expoStart
        )
    ,
    prebuild: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/prebuild"));
        }).then((i)=>i.expoPrebuild
        )
    ,
    config: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/config"));
        }).then((i)=>i.expoConfig
        )
    ,
    export: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/export"));
        }).then((i)=>i.expoExport
        )
    ,
    // Auxiliary commands
    install: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/install"));
        }).then((i)=>i.expoInstall
        )
    ,
    // Auth
    login: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/login"));
        }).then((i)=>i.expoLogin
        )
    ,
    logout: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/logout"));
        }).then((i)=>i.expoLogout
        )
    ,
    register: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/register"));
        }).then((i)=>i.expoRegister
        )
    ,
    whoami: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require("../src/whoami"));
        }).then((i)=>i.expoWhoami
        )
};
const args = (0, _arg).default({
    // Types
    "--version": Boolean,
    "--help": Boolean,
    // Aliases
    "-v": "--version",
    "-h": "--help"
}, {
    permissive: true
});
if (args["--version"]) {
    // Version is added in the build script.
    console.log("0.1.5");
    process.exit(0);
}
// Check if we are running `npx expo <subcommand>` or `npx expo`
const isSubcommand = Boolean(commands[args._[0]]);
// Handle `--help` flag
if (!isSubcommand && args["--help"]) {
    const { login , logout , whoami , register , start , install , export: _export , config , prebuild , "run:ios": runIos , "run:android": runAndroid , ...others } = commands;
    console.log(_chalk.default`
  {bold Usage}
    {dim $} npx expo <command>

  {bold Commands}
    ${Object.keys({
        start,
        install,
        export: _export,
        config,
        ...others
    }).join(", ")}
    ${Object.keys({
        "run:ios": runIos,
        "run:android": runAndroid,
        prebuild
    }).join(", ")}
    {dim ${Object.keys({
        login,
        logout,
        whoami,
        register
    }).join(", ")}}

  {bold Options}
    --version, -v   Version number
    --help, -h      Usage info

  For more info run a command with the {bold --help} flag
    {dim $} npx expo start --help
`);
    process.exit(0);
}
const command = isSubcommand ? args._[0] : defaultCmd;
const commandArgs = isSubcommand ? args._.slice(1) : args._;
// Push the help flag to the subcommand args.
if (args["--help"]) {
    commandArgs.push("--help");
}
// Install exit hooks
process.on("SIGINT", ()=>process.exit(0)
);
process.on("SIGTERM", ()=>process.exit(0)
);
commands[command]().then((exec)=>exec(commandArgs)
);

//# sourceMappingURL=cli.map