{"version":3,"sources":["../../../../src/run/ios/runIosAsync.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\nimport { maybePromptToSyncPodsAsync } from '../../utils/cocoapods';\nimport { profile } from '../../utils/profile';\nimport { getSchemesForIosAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { startBundlerAsync } from '../startBundler';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options } from './XcodeBuild.types';\nimport { launchAppAsync } from './launchApp';\nimport { resolveOptionsAsync } from './options/resolveOptions';\n\nexport async function runIosAsync(projectRoot: string, options: Options) {\n  assertPlatform();\n\n  const install = !!options.install;\n\n  if ((await ensureNativeProjectAsync(projectRoot, { platform: 'ios', install })) && install) {\n    await maybePromptToSyncPodsAsync(projectRoot);\n  }\n\n  // Resolve the CLI arguments into useable options.\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  // Spawn the `xcodebuild` process to create the app binary.\n  const buildOutput = await XcodeBuild.buildAsync(props);\n\n  // Find the path to the built app binary, this will be used to install the binary\n  // on a device.\n  const binaryPath = await profile(XcodeBuild.getAppBinaryPath)(buildOutput);\n\n  // Start the dev server which creates all of the required info for\n  // launching the app on a simulator.\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    headless: !props.shouldStartBundler,\n    // If a scheme is specified then use that instead of the package name.\n    scheme: (await getSchemesForIosAsync(projectRoot))?.[0],\n  });\n\n  // Install and launch the app binary on a device.\n  await launchAppAsync(binaryPath, manager, {\n    isSimulator: props.isSimulator,\n    device: props.device,\n    shouldStartBundler: props.shouldStartBundler,\n  });\n\n  // Log the location of the JS logs for the device.\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  }\n}\n\nfunction assertPlatform() {\n  if (process.platform !== 'darwin') {\n    Log.exit(\n      chalk`iOS apps can only be built on macOS devices. Use {cyan eas build -p ios} to build in the cloud.`\n    );\n  }\n}\n"],"names":["runIosAsync","Log","XcodeBuild","projectRoot","options","assertPlatform","install","ensureNativeProjectAsync","platform","maybePromptToSyncPodsAsync","props","resolveOptionsAsync","buildOutput","buildAsync","binaryPath","profile","getAppBinaryPath","manager","startBundlerAsync","port","headless","shouldStartBundler","scheme","getSchemesForIosAsync","launchAppAsync","isSimulator","device","logProjectLogsLocation","process","exit","chalk"],"mappings":"AAAA;;;;QAcsBA,WAAW,GAAXA,WAAW;AAdf,IAAA,MAAO,kCAAP,OAAO,EAAA;AAEbC,IAAAA,GAAG,mCAAM,WAAW,EAAjB;AAC4B,IAAA,UAAuB,WAAvB,uBAAuB,CAAA;AAC1C,IAAA,QAAqB,WAArB,qBAAqB,CAAA;AACP,IAAA,OAAoB,WAApB,oBAAoB,CAAA;AACjB,IAAA,oBAAwB,WAAxB,wBAAwB,CAAA;AAC1B,IAAA,MAAU,WAAV,UAAU,CAAA;AACf,IAAA,aAAiB,WAAjB,iBAAiB,CAAA;AACvCC,IAAAA,UAAU,mCAAM,cAAc,EAApB;AAES,IAAA,UAAa,WAAb,aAAa,CAAA;AACR,IAAA,eAA0B,WAA1B,0BAA0B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEvD,eAAeF,WAAW,CAACG,WAAmB,EAAEC,OAAgB,EAAE;QAyB7D,GAA0C;IAxBpDC,cAAc,EAAE,CAAC;IAEjB,MAAMC,OAAO,GAAG,CAAC,CAACF,OAAO,CAACE,OAAO,AAAC;IAElC,IAAI,AAAC,MAAMC,CAAAA,GAAAA,oBAAwB,AAA2C,CAAA,yBAA3C,CAACJ,WAAW,EAAE;QAAEK,QAAQ,EAAE,KAAK;QAAEF,OAAO;KAAE,CAAC,IAAKA,OAAO,EAAE;QAC1F,MAAMG,CAAAA,GAAAA,UAA0B,AAAa,CAAA,2BAAb,CAACN,WAAW,CAAC,CAAC;KAC/C;IAED,kDAAkD;IAClD,MAAMO,KAAK,GAAG,MAAMC,CAAAA,GAAAA,eAAmB,AAAsB,CAAA,oBAAtB,CAACR,WAAW,EAAEC,OAAO,CAAC,AAAC;IAE9D,2DAA2D;IAC3D,MAAMQ,WAAW,GAAG,MAAMV,UAAU,CAACW,UAAU,CAACH,KAAK,CAAC,AAAC;IAEvD,iFAAiF;IACjF,eAAe;IACf,MAAMI,UAAU,GAAG,MAAMC,CAAAA,GAAAA,QAAO,AAA6B,CAAA,QAA7B,CAACb,UAAU,CAACc,gBAAgB,CAAC,CAACJ,WAAW,CAAC,AAAC;IAE3E,kEAAkE;IAClE,oCAAoC;IACpC,MAAMK,OAAO,GAAG,MAAMC,CAAAA,GAAAA,aAAiB,AAKrC,CAAA,kBALqC,CAACf,WAAW,EAAE;QACnDgB,IAAI,EAAET,KAAK,CAACS,IAAI;QAChBC,QAAQ,EAAE,CAACV,KAAK,CAACW,kBAAkB;QACnC,sEAAsE;QACtEC,MAAM,EAAE,CAAA,GAA0C,GAAzC,MAAMC,CAAAA,GAAAA,OAAqB,AAAa,CAAA,sBAAb,CAACpB,WAAW,CAAC,SAAM,GAA/C,KAAA,CAA+C,GAA/C,GAA0C,AAAE,CAAC,CAAC,CAAC;KACxD,CAAC,AAAC;IAEH,iDAAiD;IACjD,MAAMqB,CAAAA,GAAAA,UAAc,AAIlB,CAAA,eAJkB,CAACV,UAAU,EAAEG,OAAO,EAAE;QACxCQ,WAAW,EAAEf,KAAK,CAACe,WAAW;QAC9BC,MAAM,EAAEhB,KAAK,CAACgB,MAAM;QACpBL,kBAAkB,EAAEX,KAAK,CAACW,kBAAkB;KAC7C,CAAC,CAAC;IAEH,kDAAkD;IAClD,IAAIX,KAAK,CAACW,kBAAkB,EAAE;QAC5BM,CAAAA,GAAAA,MAAsB,AAAE,CAAA,uBAAF,EAAE,CAAC;KAC1B;CACF;AAED,SAAStB,cAAc,GAAG;IACxB,IAAIuB,OAAO,CAACpB,QAAQ,KAAK,QAAQ,EAAE;QACjCP,GAAG,CAAC4B,IAAI,CACNC,MAAK,QAAA,CAAC,+FAA+F,CAAC,CACvG,CAAC;KACH;CACF"}