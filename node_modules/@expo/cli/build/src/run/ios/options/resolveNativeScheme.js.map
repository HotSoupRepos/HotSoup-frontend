{"version":3,"sources":["../../../../../src/run/ios/options/resolveNativeScheme.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport * as Log from '../../../log';\nimport { CommandError } from '../../../utils/errors';\nimport { profile } from '../../../utils/profile';\nimport { selectAsync } from '../../../utils/prompts';\nimport { Options, ProjectInfo, XcodeConfiguration } from '../XcodeBuild.types';\n\ntype NativeSchemeProps = {\n  name: string;\n  osType?: string;\n};\n\nexport async function resolveNativeSchemePropsAsync(\n  projectRoot: string,\n  options: Pick<Options, 'scheme' | 'configuration'>,\n  xcodeProject: ProjectInfo\n): Promise<NativeSchemeProps> {\n  return (\n    (await promptOrQueryNativeSchemeAsync(projectRoot, options)) ??\n    getDefaultNativeScheme(projectRoot, options, xcodeProject)\n  );\n}\n\n/** Resolve the native iOS build `scheme` for a given `configuration`. If the `scheme` isn't provided then the user will be prompted to select one. */\nexport async function promptOrQueryNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | boolean; configuration?: XcodeConfiguration }\n): Promise<NativeSchemeProps | null> {\n  const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n    configuration,\n  });\n  if (!schemes.length) {\n    throw new CommandError('IOS_MALFORMED', 'No native iOS build schemes found');\n  }\n\n  if (scheme === true) {\n    if (schemes.length === 1) {\n      Log.log(`Auto selecting only available scheme: ${schemes[0].name}`);\n      return schemes[0];\n    }\n    const resolvedSchemeName = await selectAsync(\n      'Select a scheme',\n      schemes.map((value) => {\n        const isApp =\n          value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n        return {\n          value: value.name,\n          title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n        };\n      }),\n      {\n        nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n          ', '\n        )}`,\n      }\n    );\n    return schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n  }\n  // Attempt to match the schemes up so we can open the correct simulator\n  return scheme ? schemes.find(({ name }) => name === scheme) || { name: scheme } : null;\n}\n\nexport function getDefaultNativeScheme(\n  projectRoot: string,\n  options: Pick<Options, 'configuration'>,\n  xcodeProject: ProjectInfo\n): NativeSchemeProps {\n  // If the resolution failed then we should just use the first runnable scheme that\n  // matches the provided configuration.\n  const resolvedScheme = profile(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(\n    projectRoot,\n    {\n      configuration: options.configuration,\n    }\n  )[0];\n\n  // If we couldn't find the scheme, then we'll guess at it,\n  // this is needed for cases where the native code hasn't been generated yet.\n  if (resolvedScheme) {\n    return resolvedScheme;\n  }\n  return {\n    name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n  };\n}\n"],"names":["resolveNativeSchemePropsAsync","promptOrQueryNativeSchemeAsync","getDefaultNativeScheme","Log","projectRoot","options","xcodeProject","scheme","configuration","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","length","CommandError","log","name","resolvedSchemeName","selectAsync","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","chalk","bold","gray","nonInteractiveHelp","join","find","resolvedScheme","profile","path","basename","extname"],"mappings":"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"}