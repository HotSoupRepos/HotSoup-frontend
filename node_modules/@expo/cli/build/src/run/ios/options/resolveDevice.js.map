{"version":3,"sources":["../../../../../src/run/ios/options/resolveDevice.ts"],"sourcesContent":["import * as Log from '../../../log';\nimport {\n  AppleDeviceManager,\n  ensureSimulatorOpenAsync,\n} from '../../../start/platforms/ios/AppleDeviceManager';\nimport { assertSystemRequirementsAsync } from '../../../start/platforms/ios/assertSystemRequirements';\nimport { sortDefaultDeviceToBeginningAsync } from '../../../start/platforms/ios/promptAppleDevice';\nimport { OSType } from '../../../start/platforms/ios/simctl';\nimport * as SimControl from '../../../start/platforms/ios/simctl';\nimport { CommandError } from '../../../utils/errors';\nimport { profile } from '../../../utils/profile';\nimport { logDeviceArgument } from '../../hints';\nimport * as AppleDevice from '../appleDevice/AppleDevice';\nimport { promptDeviceAsync } from './promptDevice';\n\ntype AnyDevice = SimControl.Device | AppleDevice.ConnectedDevice;\n\n/** Get a list of devices (called destinations) that are connected to the host machine. Filter by `osType` if defined. */\nasync function getDevicesAsync({ osType }: { osType?: OSType } = {}): Promise<AnyDevice[]> {\n  const connectedDevices = await AppleDevice.getConnectedDevicesAsync();\n\n  const simulators = await sortDefaultDeviceToBeginningAsync(\n    await profile(SimControl.getDevicesAsync)(),\n    osType\n  );\n\n  const devices = [...connectedDevices, ...simulators];\n\n  // If osType is defined, then filter out ineligible simulators.\n  // Only do this inside of the device selection so users who pass the entire device udid can attempt to select any simulator (even if it's invalid).\n  return osType ? filterDevicesForOsType(devices, osType) : devices;\n}\n\n/** @returns a list of devices, filtered by the provided `osType`. */\nfunction filterDevicesForOsType(devices: AnyDevice[], osType: OSType): AnyDevice[] {\n  return devices.filter((device) => !('osType' in device) || device.osType === osType);\n}\n\n/** Given a `device` argument from the CLI, parse and prompt our way to a usable device for building. */\nexport async function resolveDeviceAsync(\n  device?: string | boolean,\n  { osType }: { osType?: OSType } = {}\n): Promise<AnyDevice> {\n  await assertSystemRequirementsAsync();\n\n  if (!device) {\n    /** Finds the first possible device and returns in a booted state. */\n    const manager = await AppleDeviceManager.resolveAsync({\n      device: {\n        osType,\n      },\n    });\n    Log.debug(\n      `Resolved default device (name: ${manager.device.name}, udid: ${manager.device.udid}, osType: ${osType})`\n    );\n    return manager.device;\n  }\n\n  const devices: AnyDevice[] = await getDevicesAsync({\n    osType,\n  });\n\n  const resolved =\n    device === true\n      ? // `--device` (no props after)\n        await promptDeviceAsync(devices)\n      : // `--device <name|udid>`\n        findDeviceFromSearchValue(devices, device.toLowerCase());\n\n  return ensureBootedAsync(resolved);\n}\n\n/** @returns `true` if the given device is a simulator. */\nexport function isSimulatorDevice(device: AnyDevice): boolean {\n  return (\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.')\n  );\n}\n\n/** @returns device matching the `searchValue` against name or UDID. */\nfunction findDeviceFromSearchValue(devices: AnyDevice[], searchValue: string): AnyDevice {\n  const device = devices.find(\n    (device) =>\n      device.udid.toLowerCase() === searchValue || device.name.toLowerCase() === searchValue\n  );\n  if (!device) {\n    throw new CommandError('BAD_ARGS', `No device UDID or name matching \"${searchValue}\"`);\n  }\n  return device;\n}\n\n/** Ensures the device is booted if it's a simulator. */\nasync function ensureBootedAsync(device: AnyDevice): Promise<AnyDevice> {\n  // --device with no props after\n  logDeviceArgument(device.udid);\n  if (isSimulatorDevice(device)) {\n    return ensureSimulatorOpenAsync({ udid: device.udid });\n  }\n  return device;\n}\n"],"names":["resolveDeviceAsync","isSimulatorDevice","Log","SimControl","AppleDevice","getDevicesAsync","osType","connectedDevices","getConnectedDevicesAsync","simulators","sortDefaultDeviceToBeginningAsync","profile","devices","filterDevicesForOsType","filter","device","assertSystemRequirementsAsync","manager","AppleDeviceManager","resolveAsync","debug","name","udid","resolved","promptDeviceAsync","findDeviceFromSearchValue","toLowerCase","ensureBootedAsync","deviceType","startsWith","searchValue","find","CommandError","logDeviceArgument","ensureSimulatorOpenAsync"],"mappings":"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"}