{"version":3,"sources":["../../../../../src/run/ios/options/resolveOptions.ts"],"sourcesContent":["import { isOSType } from '../../../start/platforms/ios/simctl';\nimport { resolveBundlerPropsAsync } from '../../resolveBundlerProps';\nimport { BuildProps, Options } from '../XcodeBuild.types';\nimport { isSimulatorDevice, resolveDeviceAsync } from './resolveDevice';\nimport { resolveNativeSchemePropsAsync } from './resolveNativeScheme';\nimport { resolveXcodeProject } from './resolveXcodeProject';\n\n/** Resolve arguments for the `run:ios` command. */\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  const bundlerProps = await resolveBundlerPropsAsync(projectRoot, options);\n\n  // Resolve the scheme before the device so we can filter devices based on\n  // whichever scheme is selected (i.e. don't present TV devices if the scheme cannot be run on a TV).\n  const { osType, name: scheme } = await resolveNativeSchemePropsAsync(\n    projectRoot,\n    options,\n    xcodeProject\n  );\n\n  // Resolve the device based on the provided device id or prompt\n  // from a list of devices (connected or simulated) that are filtered by the scheme.\n  const device = await resolveDeviceAsync(options.device, {\n    // It's unclear if there's any value to asserting that we haven't hardcoded the os type in the CLI.\n    osType: isOSType(osType) ? osType : undefined,\n  });\n\n  const isSimulator = isSimulatorDevice(device);\n\n  // Use the configuration or `Debug` if none is provided.\n  const configuration = options.configuration || 'Debug';\n\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n\n  return {\n    ...bundlerProps,\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration,\n    shouldSkipInitialBundling,\n    buildCache: options.buildCache !== false,\n    scheme,\n  };\n}\n"],"names":["resolveOptionsAsync","projectRoot","options","xcodeProject","resolveXcodeProject","bundlerProps","resolveBundlerPropsAsync","osType","name","scheme","resolveNativeSchemePropsAsync","device","resolveDeviceAsync","isOSType","undefined","isSimulator","isSimulatorDevice","configuration","shouldSkipInitialBundling","buildCache"],"mappings":"AAAA;;;;QAQsBA,mBAAmB,GAAnBA,mBAAmB;AARhB,IAAA,OAAqC,WAArC,qCAAqC,CAAA;AACrB,IAAA,oBAA2B,WAA3B,2BAA2B,CAAA;AAEd,IAAA,cAAiB,WAAjB,iBAAiB,CAAA;AACzB,IAAA,oBAAuB,WAAvB,uBAAuB,CAAA;AACjC,IAAA,oBAAuB,WAAvB,uBAAuB,CAAA;AAGpD,eAAeA,mBAAmB,CACvCC,WAAmB,EACnBC,OAAgB,EACK;IACrB,MAAMC,YAAY,GAAGC,CAAAA,GAAAA,oBAAmB,AAAa,CAAA,oBAAb,CAACH,WAAW,CAAC,AAAC;IAEtD,MAAMI,YAAY,GAAG,MAAMC,CAAAA,GAAAA,oBAAwB,AAAsB,CAAA,yBAAtB,CAACL,WAAW,EAAEC,OAAO,CAAC,AAAC;IAE1E,yEAAyE;IACzE,oGAAoG;IACpG,MAAM,EAAEK,MAAM,CAAA,EAAEC,IAAI,EAAEC,MAAM,CAAA,EAAE,GAAG,MAAMC,CAAAA,GAAAA,oBAA6B,AAInE,CAAA,8BAJmE,CAClET,WAAW,EACXC,OAAO,EACPC,YAAY,CACb,AAAC;IAEF,+DAA+D;IAC/D,mFAAmF;IACnF,MAAMQ,MAAM,GAAG,MAAMC,CAAAA,GAAAA,cAAkB,AAGrC,CAAA,mBAHqC,CAACV,OAAO,CAACS,MAAM,EAAE;QACtD,mGAAmG;QACnGJ,MAAM,EAAEM,CAAAA,GAAAA,OAAQ,AAAQ,CAAA,SAAR,CAACN,MAAM,CAAC,GAAGA,MAAM,GAAGO,SAAS;KAC9C,CAAC,AAAC;IAEH,MAAMC,WAAW,GAAGC,CAAAA,GAAAA,cAAiB,AAAQ,CAAA,kBAAR,CAACL,MAAM,CAAC,AAAC;IAE9C,wDAAwD;IACxD,MAAMM,aAAa,GAAGf,OAAO,CAACe,aAAa,IAAI,OAAO,AAAC;IAEvD,gEAAgE;IAChE,8FAA8F;IAC9F,mGAAmG;IACnG,gEAAgE;IAChE,MAAMC,yBAAyB,GAAGD,aAAa,KAAK,OAAO,IAAI,CAACF,WAAW,AAAC;IAE5E,OAAO;QACL,GAAGV,YAAY;QACfJ,WAAW;QACXc,WAAW;QACXZ,YAAY;QACZQ,MAAM;QACNM,aAAa;QACbC,yBAAyB;QACzBC,UAAU,EAAEjB,OAAO,CAACiB,UAAU,KAAK,KAAK;QACxCV,MAAM;KACP,CAAC;CACH"}