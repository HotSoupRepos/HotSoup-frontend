{"version":3,"sources":["../../../../../../src/run/ios/appleDevice/protocol/AbstractProtocol.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport plist from '@expo/plist';\nimport { Socket } from 'net';\n\nimport { parsePlistBuffer } from '../../../../utils/plist';\n\nconst BPLIST_MAGIC = Buffer.from('bplist00');\n\nexport type ProtocolReaderCallback = (resp: any, err?: Error) => void;\n\nexport class ProtocolReaderFactory<T> {\n  constructor(private ProtocolReader: new (callback: ProtocolReaderCallback) => T) {}\n\n  create(callback: (resp: any, err?: Error) => void): T {\n    return new this.ProtocolReader(callback);\n  }\n}\n\nexport abstract class ProtocolReader {\n  protected body!: Buffer; // TODO: ! -> ?\n  protected bodyLength!: number; // TODO: ! -> ?\n  protected buffer = Buffer.alloc(0);\n  constructor(protected headerSize: number, protected callback: ProtocolReaderCallback) {\n    this.onData = this.onData.bind(this);\n  }\n\n  /** Returns length of body, or -1 if header doesn't contain length */\n  protected abstract parseHeader(data: Buffer): number;\n  protected abstract parseBody(data: Buffer): any;\n\n  onData(data?: Buffer) {\n    try {\n      // if there's data, add it on to existing buffer\n      this.buffer = data ? Buffer.concat([this.buffer, data]) : this.buffer;\n      // we haven't gotten the body length from the header yet\n      if (!this.bodyLength) {\n        if (this.buffer.length < this.headerSize) {\n          // partial header, wait for rest\n          return;\n        }\n        this.bodyLength = this.parseHeader(this.buffer);\n        // move on to body\n        this.buffer = this.buffer.slice(this.headerSize);\n        if (!this.buffer.length) {\n          // only got header, wait for body\n          return;\n        }\n      }\n      if (this.buffer.length < this.bodyLength) {\n        // wait for rest of body\n        return;\n      }\n\n      if (this.bodyLength === -1) {\n        this.callback(this.parseBody(this.buffer));\n        this.buffer = Buffer.alloc(0);\n      } else {\n        this.body = this.buffer.slice(0, this.bodyLength);\n        this.bodyLength -= this.body.length;\n        if (!this.bodyLength) {\n          this.callback(this.parseBody(this.body));\n        }\n        this.buffer = this.buffer.slice(this.body.length);\n        // There are multiple messages here, call parse again\n        if (this.buffer.length) {\n          this.onData();\n        }\n      }\n    } catch (err: any) {\n      this.callback(null, err);\n    }\n  }\n}\n\nexport abstract class PlistProtocolReader extends ProtocolReader {\n  protected parseBody(body: Buffer) {\n    if (BPLIST_MAGIC.compare(body, 0, 8) === 0) {\n      return parsePlistBuffer(body);\n    } else {\n      return plist.parse(body.toString('utf8'));\n    }\n  }\n}\n\nexport interface ProtocolWriter {\n  write(sock: Socket, msg: any): void;\n}\n\nexport abstract class ProtocolClient<MessageType = any> {\n  constructor(\n    public socket: Socket,\n    protected readerFactory: ProtocolReaderFactory<ProtocolReader>,\n    protected writer: ProtocolWriter\n  ) {}\n\n  sendMessage<ResponseType = any>(msg: MessageType): Promise<ResponseType>;\n  sendMessage<CallbackType = void, ResponseType = any>(\n    msg: MessageType,\n    callback: (response: ResponseType, resolve: any, reject: any) => void\n  ): Promise<CallbackType>;\n  sendMessage<CallbackType = void, ResponseType = any>(\n    msg: MessageType,\n    callback?: (response: ResponseType, resolve: any, reject: any) => void\n  ): Promise<CallbackType | ResponseType> {\n    return new Promise<ResponseType | CallbackType>((resolve, reject) => {\n      const reader = this.readerFactory.create(async (response: ResponseType, error?: Error) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        if (callback) {\n          callback(\n            response,\n            (value: any) => {\n              this.socket.removeListener('data', reader.onData);\n              resolve(value);\n            },\n            reject\n          );\n        } else {\n          this.socket.removeListener('data', reader.onData);\n          resolve(response);\n        }\n      });\n      this.socket.on('data', reader.onData);\n      this.writer.write(this.socket, msg);\n    });\n  }\n}\n"],"names":["BPLIST_MAGIC","Buffer","from","ProtocolReaderFactory","constructor","ProtocolReader","create","callback","headerSize","buffer","alloc","onData","bind","data","concat","bodyLength","length","parseHeader","slice","parseBody","body","err","PlistProtocolReader","compare","parsePlistBuffer","plist","parse","toString","ProtocolClient","socket","readerFactory","writer","sendMessage","msg","Promise","resolve","reject","reader","response","error","value","removeListener","on","write"],"mappings":"AAOA;;;;AAAkB,IAAA,MAAa,kCAAb,aAAa,EAAA;AAGE,IAAA,OAAyB,WAAzB,yBAAyB,CAAA;;;;;;AAE1D,MAAMA,YAAY,GAAGC,MAAM,CAACC,IAAI,CAAC,UAAU,CAAC,AAAC;AAItC,MAAMC,qBAAqB;IAChCC,YAAoBC,eAA2D,CAAE;aAA7DA,cAA2D,GAA3DA,eAA2D;KAAI;IAEnFC,MAAM,CAACC,QAA0C,EAAK;QACpD,OAAO,IAAI,IAAI,CAACF,cAAc,CAACE,QAAQ,CAAC,CAAC;KAC1C;CACF;QANYJ,qBAAqB,GAArBA,qBAAqB;AAQ3B,MAAeE,cAAc;IAIlCD,YAAsBI,UAAkB,EAAYD,QAAgC,CAAE;aAAhEC,UAAkB,GAAlBA,UAAkB;aAAYD,QAAgC,GAAhCA,QAAgC;aAD1EE,MAAM,GAAGR,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC;QAEhC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;IAMDD,MAAM,CAACE,IAAa,EAAE;QACpB,IAAI;YACF,gDAAgD;YAChD,IAAI,CAACJ,MAAM,GAAGI,IAAI,GAAGZ,MAAM,CAACa,MAAM,CAAC;gBAAC,IAAI,CAACL,MAAM;gBAAEI,IAAI;aAAC,CAAC,GAAG,IAAI,CAACJ,MAAM,CAAC;YACtE,wDAAwD;YACxD,IAAI,CAAC,IAAI,CAACM,UAAU,EAAE;gBACpB,IAAI,IAAI,CAACN,MAAM,CAACO,MAAM,GAAG,IAAI,CAACR,UAAU,EAAE;oBACxC,gCAAgC;oBAChC,OAAO;iBACR;gBACD,IAAI,CAACO,UAAU,GAAG,IAAI,CAACE,WAAW,CAAC,IAAI,CAACR,MAAM,CAAC,CAAC;gBAChD,kBAAkB;gBAClB,IAAI,CAACA,MAAM,GAAG,IAAI,CAACA,MAAM,CAACS,KAAK,CAAC,IAAI,CAACV,UAAU,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAACC,MAAM,CAACO,MAAM,EAAE;oBACvB,iCAAiC;oBACjC,OAAO;iBACR;aACF;YACD,IAAI,IAAI,CAACP,MAAM,CAACO,MAAM,GAAG,IAAI,CAACD,UAAU,EAAE;gBACxC,wBAAwB;gBACxB,OAAO;aACR;YAED,IAAI,IAAI,CAACA,UAAU,KAAK,CAAC,CAAC,EAAE;gBAC1B,IAAI,CAACR,QAAQ,CAAC,IAAI,CAACY,SAAS,CAAC,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAACA,MAAM,GAAGR,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;aAC/B,MAAM;gBACL,IAAI,CAACU,IAAI,GAAG,IAAI,CAACX,MAAM,CAACS,KAAK,CAAC,CAAC,EAAE,IAAI,CAACH,UAAU,CAAC,CAAC;gBAClD,IAAI,CAACA,UAAU,IAAI,IAAI,CAACK,IAAI,CAACJ,MAAM,CAAC;gBACpC,IAAI,CAAC,IAAI,CAACD,UAAU,EAAE;oBACpB,IAAI,CAACR,QAAQ,CAAC,IAAI,CAACY,SAAS,CAAC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;iBAC1C;gBACD,IAAI,CAACX,MAAM,GAAG,IAAI,CAACA,MAAM,CAACS,KAAK,CAAC,IAAI,CAACE,IAAI,CAACJ,MAAM,CAAC,CAAC;gBAClD,qDAAqD;gBACrD,IAAI,IAAI,CAACP,MAAM,CAACO,MAAM,EAAE;oBACtB,IAAI,CAACL,MAAM,EAAE,CAAC;iBACf;aACF;SACF,CAAC,OAAOU,GAAG,EAAO;YACjB,IAAI,CAACd,QAAQ,CAAC,IAAI,EAAEc,GAAG,CAAC,CAAC;SAC1B;KACF;CACF;QAtDqBhB,cAAc,GAAdA,cAAc;AAwD7B,MAAeiB,mBAAmB,SAASjB,cAAc;IAC9D,AAAUc,SAAS,CAACC,IAAY,EAAE;QAChC,IAAIpB,YAAY,CAACuB,OAAO,CAACH,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YAC1C,OAAOI,CAAAA,GAAAA,OAAgB,AAAM,CAAA,iBAAN,CAACJ,IAAI,CAAC,CAAC;SAC/B,MAAM;YACL,OAAOK,MAAK,QAAA,CAACC,KAAK,CAACN,IAAI,CAACO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;SAC3C;KACF;CACF;QARqBL,mBAAmB,GAAnBA,mBAAmB;AAclC,MAAeM,cAAc;IAClCxB,YACSyB,MAAc,EACXC,aAAoD,EACpDC,MAAsB,CAChC;aAHOF,MAAc,GAAdA,MAAc;aACXC,aAAoD,GAApDA,aAAoD;aACpDC,MAAsB,GAAtBA,MAAsB;KAC9B;IAOJC,WAAW,CACTC,GAAgB,EAChB1B,QAAsE,EAChC;QACtC,OAAO,IAAI2B,OAAO,CAA8B,CAACC,OAAO,EAAEC,MAAM,GAAK;YACnE,MAAMC,MAAM,GAAG,IAAI,CAACP,aAAa,CAACxB,MAAM,CAAC,OAAOgC,QAAsB,EAAEC,KAAa,GAAK;gBACxF,IAAIA,KAAK,EAAE;oBACTH,MAAM,CAACG,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBACD,IAAIhC,QAAQ,EAAE;oBACZA,QAAQ,CACN+B,QAAQ,EACR,CAACE,KAAU,GAAK;wBACd,IAAI,CAACX,MAAM,CAACY,cAAc,CAAC,MAAM,EAAEJ,MAAM,CAAC1B,MAAM,CAAC,CAAC;wBAClDwB,OAAO,CAACK,KAAK,CAAC,CAAC;qBAChB,EACDJ,MAAM,CACP,CAAC;iBACH,MAAM;oBACL,IAAI,CAACP,MAAM,CAACY,cAAc,CAAC,MAAM,EAAEJ,MAAM,CAAC1B,MAAM,CAAC,CAAC;oBAClDwB,OAAO,CAACG,QAAQ,CAAC,CAAC;iBACnB;aACF,CAAC,AAAC;YACH,IAAI,CAACT,MAAM,CAACa,EAAE,CAAC,MAAM,EAAEL,MAAM,CAAC1B,MAAM,CAAC,CAAC;YACtC,IAAI,CAACoB,MAAM,CAACY,KAAK,CAAC,IAAI,CAACd,MAAM,EAAEI,GAAG,CAAC,CAAC;SACrC,CAAC,CAAC;KACJ;CACF;QAxCqBL,cAAc,GAAdA,cAAc"}