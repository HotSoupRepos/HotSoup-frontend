{"version":3,"sources":["../../../../../../src/run/ios/appleDevice/client/LockdowndClient.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport { Socket } from 'net';\nimport * as tls from 'tls';\n\nimport { LockdownProtocolClient } from '../protocol/LockdownProtocol';\nimport { ResponseError, ServiceClient } from './ServiceClient';\nimport { UsbmuxdPairRecord } from './UsbmuxdClient';\n\nconst debug = Debug('expo:apple-device:client:lockdownd');\n\nexport interface DeviceValues {\n  BasebandCertId: number;\n  BasebandKeyHashInformation: {\n    AKeyStatus: number;\n    SKeyHash: Buffer;\n    SKeyStatus: number;\n  };\n  BasebandSerialNumber: Buffer;\n  BasebandVersion: string;\n  BoardId: number;\n  BuildVersion: string;\n  ChipID: number;\n  DeviceClass: string;\n  DeviceColor: string;\n  DeviceName: string;\n  DieID: number;\n  HardwareModel: string;\n  HasSiDP: boolean;\n  PartitionType: string;\n  ProductName: string;\n  ProductType: string;\n  ProductVersion: string;\n  ProductionSOC: boolean;\n  ProtocolVersion: string;\n  TelephonyCapability: boolean;\n  UniqueChipID: number;\n  UniqueDeviceID: string;\n  WiFiAddress: string;\n  [key: string]: any;\n}\n\ninterface LockdowndServiceResponse {\n  Request: 'StartService';\n  Service: string;\n  Port: number;\n  EnableServiceSSL?: boolean; // Only on iOS 13+\n}\n\ninterface LockdowndSessionResponse {\n  Request: 'StartSession';\n  EnableSessionSSL: boolean;\n}\n\ninterface LockdowndAllValuesResponse {\n  Request: 'GetValue';\n  Value: DeviceValues;\n}\n\ninterface LockdowndValueResponse {\n  Request: 'GetValue';\n  Key: string;\n  Value: string;\n}\n\ninterface LockdowndQueryTypeResponse {\n  Request: 'QueryType';\n  Type: string;\n}\n\nfunction isLockdowndServiceResponse(resp: any): resp is LockdowndServiceResponse {\n  return resp.Request === 'StartService' && resp.Service !== undefined && resp.Port !== undefined;\n}\n\nfunction isLockdowndSessionResponse(resp: any): resp is LockdowndSessionResponse {\n  return resp.Request === 'StartSession';\n}\n\nfunction isLockdowndAllValuesResponse(resp: any): resp is LockdowndAllValuesResponse {\n  return resp.Request === 'GetValue' && resp.Value !== undefined;\n}\n\nfunction isLockdowndValueResponse(resp: any): resp is LockdowndValueResponse {\n  return resp.Request === 'GetValue' && resp.Key !== undefined && typeof resp.Value === 'string';\n}\n\nfunction isLockdowndQueryTypeResponse(resp: any): resp is LockdowndQueryTypeResponse {\n  return resp.Request === 'QueryType' && resp.Type !== undefined;\n}\n\nexport class LockdowndClient extends ServiceClient<LockdownProtocolClient> {\n  constructor(public socket: Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async startService(name: string) {\n    debug(`startService: ${name}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartService',\n      Service: name,\n    });\n\n    if (isLockdowndServiceResponse(resp)) {\n      return { port: resp.Port, enableServiceSSL: !!resp.EnableServiceSSL };\n    } else {\n      throw new ResponseError(`Error starting service ${name}`, resp);\n    }\n  }\n\n  async startSession(pairRecord: UsbmuxdPairRecord) {\n    debug(`startSession: ${pairRecord}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartSession',\n      HostID: pairRecord.HostID,\n      SystemBUID: pairRecord.SystemBUID,\n    });\n\n    if (isLockdowndSessionResponse(resp)) {\n      if (resp.EnableSessionSSL) {\n        this.protocolClient.socket = new tls.TLSSocket(this.protocolClient.socket, {\n          secureContext: tls.createSecureContext({\n            secureProtocol: 'TLSv1_method',\n            cert: pairRecord.RootCertificate,\n            key: pairRecord.RootPrivateKey,\n          }),\n        });\n        debug(`Socket upgraded to TLS connection`);\n      }\n      // TODO: save sessionID for StopSession?\n    } else {\n      throw new ResponseError('Error starting session', resp);\n    }\n  }\n\n  async getAllValues() {\n    debug(`getAllValues`);\n\n    const resp = await this.protocolClient.sendMessage({ Request: 'GetValue' });\n\n    if (isLockdowndAllValuesResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async getValue(val: string) {\n    debug(`getValue: ${val}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'GetValue',\n      Key: val,\n    });\n\n    if (isLockdowndValueResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async queryType() {\n    debug('queryType');\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'QueryType',\n    });\n\n    if (isLockdowndQueryTypeResponse(resp)) {\n      return resp.Type;\n    } else {\n      throw new ResponseError('Error getting lockdown query type', resp);\n    }\n  }\n\n  async doHandshake(pairRecord: UsbmuxdPairRecord) {\n    debug('doHandshake');\n\n    // if (await this.lockdownQueryType() !== 'com.apple.mobile.lockdown') {\n    //   throw new CommandError('Invalid type received from lockdown handshake');\n    // }\n    // await this.getLockdownValue('ProductVersion');\n    // TODO: validate pair and pair\n    await this.startSession(pairRecord);\n  }\n}\n"],"names":["tls","debug","Debug","isLockdowndServiceResponse","resp","Request","Service","undefined","Port","isLockdowndSessionResponse","isLockdowndAllValuesResponse","Value","isLockdowndValueResponse","Key","isLockdowndQueryTypeResponse","Type","LockdowndClient","ServiceClient","constructor","socket","LockdownProtocolClient","startService","name","protocolClient","sendMessage","port","enableServiceSSL","EnableServiceSSL","ResponseError","startSession","pairRecord","HostID","SystemBUID","EnableSessionSSL","TLSSocket","secureContext","createSecureContext","secureProtocol","cert","RootCertificate","key","RootPrivateKey","getAllValues","getValue","val","queryType","doHandshake"],"mappings":"AAOA;;;;AAAkB,IAAA,MAAO,kCAAP,OAAO,EAAA;AAEbA,IAAAA,GAAG,mCAAM,KAAK,EAAX;AAEwB,IAAA,iBAA8B,WAA9B,8BAA8B,CAAA;AACxB,IAAA,cAAiB,WAAjB,iBAAiB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAG9D,MAAMC,KAAK,GAAGC,CAAAA,GAAAA,MAAK,AAAsC,CAAA,QAAtC,CAAC,oCAAoC,CAAC,AAAC;AA6D1D,SAASC,0BAA0B,CAACC,IAAS,EAAoC;IAC/E,OAAOA,IAAI,CAACC,OAAO,KAAK,cAAc,IAAID,IAAI,CAACE,OAAO,KAAKC,SAAS,IAAIH,IAAI,CAACI,IAAI,KAAKD,SAAS,CAAC;CACjG;AAED,SAASE,0BAA0B,CAACL,IAAS,EAAoC;IAC/E,OAAOA,IAAI,CAACC,OAAO,KAAK,cAAc,CAAC;CACxC;AAED,SAASK,4BAA4B,CAACN,IAAS,EAAsC;IACnF,OAAOA,IAAI,CAACC,OAAO,KAAK,UAAU,IAAID,IAAI,CAACO,KAAK,KAAKJ,SAAS,CAAC;CAChE;AAED,SAASK,wBAAwB,CAACR,IAAS,EAAkC;IAC3E,OAAOA,IAAI,CAACC,OAAO,KAAK,UAAU,IAAID,IAAI,CAACS,GAAG,KAAKN,SAAS,IAAI,OAAOH,IAAI,CAACO,KAAK,KAAK,QAAQ,CAAC;CAChG;AAED,SAASG,4BAA4B,CAACV,IAAS,EAAsC;IACnF,OAAOA,IAAI,CAACC,OAAO,KAAK,WAAW,IAAID,IAAI,CAACW,IAAI,KAAKR,SAAS,CAAC;CAChE;AAEM,MAAMS,eAAe,SAASC,cAAa,cAAA;IAChDC,YAAmBC,MAAc,CAAE;QACjC,KAAK,CAACA,MAAM,EAAE,IAAIC,iBAAsB,uBAAA,CAACD,MAAM,CAAC,CAAC,CAAC;aADjCA,MAAc,GAAdA,MAAc;KAEhC;IAED,MAAME,YAAY,CAACC,IAAY,EAAE;QAC/BrB,KAAK,CAAC,CAAC,cAAc,EAAEqB,IAAI,CAAC,CAAC,CAAC,CAAC;QAE/B,MAAMlB,IAAI,GAAG,MAAM,IAAI,CAACmB,cAAc,CAACC,WAAW,CAAC;YACjDnB,OAAO,EAAE,cAAc;YACvBC,OAAO,EAAEgB,IAAI;SACd,CAAC,AAAC;QAEH,IAAInB,0BAA0B,CAACC,IAAI,CAAC,EAAE;YACpC,OAAO;gBAAEqB,IAAI,EAAErB,IAAI,CAACI,IAAI;gBAAEkB,gBAAgB,EAAE,CAAC,CAACtB,IAAI,CAACuB,gBAAgB;aAAE,CAAC;SACvE,MAAM;YACL,MAAM,IAAIC,cAAa,cAAA,CAAC,CAAC,uBAAuB,EAAEN,IAAI,CAAC,CAAC,EAAElB,IAAI,CAAC,CAAC;SACjE;KACF;IAED,MAAMyB,YAAY,CAACC,UAA6B,EAAE;QAChD7B,KAAK,CAAC,CAAC,cAAc,EAAE6B,UAAU,CAAC,CAAC,CAAC,CAAC;QAErC,MAAM1B,IAAI,GAAG,MAAM,IAAI,CAACmB,cAAc,CAACC,WAAW,CAAC;YACjDnB,OAAO,EAAE,cAAc;YACvB0B,MAAM,EAAED,UAAU,CAACC,MAAM;YACzBC,UAAU,EAAEF,UAAU,CAACE,UAAU;SAClC,CAAC,AAAC;QAEH,IAAIvB,0BAA0B,CAACL,IAAI,CAAC,EAAE;YACpC,IAAIA,IAAI,CAAC6B,gBAAgB,EAAE;gBACzB,IAAI,CAACV,cAAc,CAACJ,MAAM,GAAG,IAAInB,GAAG,CAACkC,SAAS,CAAC,IAAI,CAACX,cAAc,CAACJ,MAAM,EAAE;oBACzEgB,aAAa,EAAEnC,GAAG,CAACoC,mBAAmB,CAAC;wBACrCC,cAAc,EAAE,cAAc;wBAC9BC,IAAI,EAAER,UAAU,CAACS,eAAe;wBAChCC,GAAG,EAAEV,UAAU,CAACW,cAAc;qBAC/B,CAAC;iBACH,CAAC,CAAC;gBACHxC,KAAK,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;aAC5C;QACD,wCAAwC;SACzC,MAAM;YACL,MAAM,IAAI2B,cAAa,cAAA,CAAC,wBAAwB,EAAExB,IAAI,CAAC,CAAC;SACzD;KACF;IAED,MAAMsC,YAAY,GAAG;QACnBzC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QAEtB,MAAMG,IAAI,GAAG,MAAM,IAAI,CAACmB,cAAc,CAACC,WAAW,CAAC;YAAEnB,OAAO,EAAE,UAAU;SAAE,CAAC,AAAC;QAE5E,IAAIK,4BAA4B,CAACN,IAAI,CAAC,EAAE;YACtC,OAAOA,IAAI,CAACO,KAAK,CAAC;SACnB,MAAM;YACL,MAAM,IAAIiB,cAAa,cAAA,CAAC,8BAA8B,EAAExB,IAAI,CAAC,CAAC;SAC/D;KACF;IAED,MAAMuC,QAAQ,CAACC,GAAW,EAAE;QAC1B3C,KAAK,CAAC,CAAC,UAAU,EAAE2C,GAAG,CAAC,CAAC,CAAC,CAAC;QAE1B,MAAMxC,IAAI,GAAG,MAAM,IAAI,CAACmB,cAAc,CAACC,WAAW,CAAC;YACjDnB,OAAO,EAAE,UAAU;YACnBQ,GAAG,EAAE+B,GAAG;SACT,CAAC,AAAC;QAEH,IAAIhC,wBAAwB,CAACR,IAAI,CAAC,EAAE;YAClC,OAAOA,IAAI,CAACO,KAAK,CAAC;SACnB,MAAM;YACL,MAAM,IAAIiB,cAAa,cAAA,CAAC,8BAA8B,EAAExB,IAAI,CAAC,CAAC;SAC/D;KACF;IAED,MAAMyC,SAAS,GAAG;QAChB5C,KAAK,CAAC,WAAW,CAAC,CAAC;QAEnB,MAAMG,IAAI,GAAG,MAAM,IAAI,CAACmB,cAAc,CAACC,WAAW,CAAC;YACjDnB,OAAO,EAAE,WAAW;SACrB,CAAC,AAAC;QAEH,IAAIS,4BAA4B,CAACV,IAAI,CAAC,EAAE;YACtC,OAAOA,IAAI,CAACW,IAAI,CAAC;SAClB,MAAM;YACL,MAAM,IAAIa,cAAa,cAAA,CAAC,mCAAmC,EAAExB,IAAI,CAAC,CAAC;SACpE;KACF;IAED,MAAM0C,WAAW,CAAChB,UAA6B,EAAE;QAC/C7B,KAAK,CAAC,aAAa,CAAC,CAAC;QAErB,wEAAwE;QACxE,6EAA6E;QAC7E,IAAI;QACJ,iDAAiD;QACjD,+BAA+B;QAC/B,MAAM,IAAI,CAAC4B,YAAY,CAACC,UAAU,CAAC,CAAC;KACrC;CACF;QAjGYd,eAAe,GAAfA,eAAe"}