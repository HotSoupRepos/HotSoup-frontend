{"version":3,"sources":["../../../src/install/installAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\n\nimport * as Log from '../log';\nimport { getVersionedPackagesAsync } from '../start/doctor/dependencies/getVersionedPackages';\nimport { findUpProjectRootOrAssert } from '../utils/findUp';\nimport { checkPackagesAsync } from './checkPackages';\nimport { Options } from './resolveOptions';\n\nexport async function installAsync(\n  packages: string[],\n  options: Options,\n  packageManagerArguments: string[] = []\n) {\n  // Locate the project root based on the process current working directory.\n  // This enables users to run `npx expo install` from a subdirectory of the project.\n  const projectRoot = findUpProjectRootOrAssert(process.cwd());\n\n  // Resolve the package manager used by the project, or based on the provided arguments.\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log: Log.log,\n  });\n\n  if (options.check || options.fix) {\n    return await checkPackagesAsync(projectRoot, {\n      packages,\n      options,\n      packageManager,\n      packageManagerArguments,\n    });\n  }\n\n  // Read the project Expo config without plugins.\n  const { exp } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // Resolve the versioned packages, then install them.\n  return installPackagesAsync(projectRoot, {\n    packageManager,\n    packages,\n    packageManagerArguments,\n    sdkVersion: exp.sdkVersion!,\n  });\n}\n\n/** Version packages and install in a project. */\nexport async function installPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n  }: {\n    /**\n     * List of packages to version\n     * @example ['uuid', 'react-native-reanimated@latest']\n     */\n    packages: string[];\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NpmPackageManager | PackageManager.YarnPackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  const versioning = await getVersionedPackagesAsync(projectRoot, {\n    packages,\n    // sdkVersion is always defined because we don't skipSDKVersionRequirement in getConfig.\n    sdkVersion,\n  });\n\n  Log.log(`Installing ${versioning.messages.join(' and ')} using ${packageManager.name}.`);\n\n  await packageManager.addWithParametersAsync(versioning.packages, packageManagerArguments);\n\n  await applyPluginsAsync(projectRoot, versioning.packages);\n}\n\n/**\n * A convenience feature for automatically applying Expo Config Plugins to the `app.json` after installing them.\n * This should be dropped in favor of autolinking in the future.\n */\nasync function applyPluginsAsync(projectRoot: string, packages: string[]) {\n  const { autoAddConfigPluginsAsync } = await import('./utils/autoAddConfigPlugins');\n\n  try {\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true, skipPlugins: true });\n\n    // Only auto add plugins if the plugins array is defined or if the project is using SDK +42.\n    await autoAddConfigPluginsAsync(\n      projectRoot,\n      exp,\n      // Split any possible NPM tags. i.e. `expo@latest` -> `expo`\n      packages.map((pkg) => pkg.split('@')[0]).filter(Boolean)\n    );\n  } catch (error: any) {\n    // If we fail to apply plugins, the log a warning and continue.\n    if (error.isPluginError) {\n      Log.warn(`Skipping config plugin check: ` + error.message);\n      return;\n    }\n    // Any other error, rethrow.\n    throw error;\n  }\n}\n"],"names":["installAsync","installPackagesAsync","PackageManager","Log","packages","options","packageManagerArguments","projectRoot","findUpProjectRootOrAssert","process","cwd","packageManager","createForProject","npm","yarn","log","check","fix","checkPackagesAsync","exp","getConfig","skipPlugins","sdkVersion","versioning","getVersionedPackagesAsync","messages","join","name","addWithParametersAsync","applyPluginsAsync","autoAddConfigPluginsAsync","skipSDKVersionRequirement","map","pkg","split","filter","Boolean","error","isPluginError","warn","message"],"mappings":"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"}