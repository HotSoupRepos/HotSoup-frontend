{"version":3,"sources":["../../../src/prebuild/prebuildAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\n\nimport * as Log from '../log';\nimport { installNodeDependenciesAsync, resolvePackageManager } from '../utils/nodeModules';\nimport { logNewSection } from '../utils/ora';\nimport { profile } from '../utils/profile';\nimport { clearNativeFolder, promptToClearMalformedNativeProjectsAsync } from './clearNativeFolder';\nimport { configureProjectAsync } from './configureProjectAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { assertPlatforms, ensureValidPlatforms, resolveTemplateOption } from './resolveOptions';\nimport { updateFromTemplateAsync } from './updateFromTemplate';\n\nexport type PrebuildResults = {\n  /** Expo config. */\n  exp: ExpoConfig;\n  /** Indicates if the process created new files. */\n  hasNewProjectFiles: boolean;\n  /** The platforms that were prebuilt. */\n  platforms: ModPlatform[];\n  /** Indicates if pod install was run. */\n  podInstall: boolean;\n  /** Indicates if node modules were installed. */\n  nodeInstall: boolean;\n  /** Indicates which package manager the project is using. */\n  packageManager: string;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 0. Attempt to clean the project folders.\n * 1. Create native projects (ios, android).\n * 2. Install node modules.\n * 3. Apply config to native projects.\n * 4. Install CocoaPods.\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  options: {\n    /** Should install node modules and cocoapods. */\n    install?: boolean;\n    /** List of platforms to prebuild. */\n    platforms: ModPlatform[];\n    /** Should delete the native folders before attempting to prebuild. */\n    clean?: boolean;\n    /** URL or file path to the prebuild template. */\n    template?: string;\n    /** Name of the node package manager to install with. */\n    packageManager?: 'npm' | 'yarn';\n    /** List of node modules to skip updating. */\n    skipDependencyUpdate?: string[];\n  }\n): Promise<PrebuildResults | null> {\n  if (options.clean) {\n    const { maybeBailOnGitStatusAsync } = await import('../utils/git');\n    // Clean the project folders...\n    if (await maybeBailOnGitStatusAsync()) {\n      return null;\n    }\n    // Clear the native folders before syncing\n    await clearNativeFolder(projectRoot, options.platforms);\n  } else {\n    // Check if the existing project folders are malformed.\n    await promptToClearMalformedNativeProjectsAsync(projectRoot, options.platforms);\n  }\n\n  // Warn if the project is attempting to prebuild an unsupported platform (iOS on Windows).\n  options.platforms = ensureValidPlatforms(options.platforms);\n  // Assert if no platforms are left over after filtering.\n  assertPlatforms(options.platforms);\n\n  // Get the Expo config, create it if missing.\n  const { exp, pkg } = await ensureConfigAsync(projectRoot, { platforms: options.platforms });\n\n  // Create native projects from template.\n  const { hasNewProjectFiles, needsPodInstall, hasNewDependencies } = await updateFromTemplateAsync(\n    projectRoot,\n    {\n      exp,\n      pkg,\n      template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n      platforms: options.platforms,\n      skipDependencyUpdate: options.skipDependencyUpdate,\n    }\n  );\n\n  // Install node modules\n  const packageManager = resolvePackageManager({\n    install: options.install,\n    npm: options.packageManager === 'npm',\n    yarn: options.packageManager === 'yarn',\n  });\n\n  if (options.install) {\n    await installNodeDependenciesAsync(projectRoot, packageManager, {\n      // We delete the dependencies when new ones are added because native packages are more fragile.\n      // npm doesn't work well so we always run the cleaning step when npm is used in favor of yarn.\n      clean: hasNewDependencies || packageManager === 'npm',\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = logNewSection('Config syncing');\n  try {\n    await profile(configureProjectAsync)(projectRoot, {\n      platforms: options.platforms,\n    });\n    configSyncingStep.succeed('Config synced');\n  } catch (error) {\n    configSyncingStep.fail('Config sync failed');\n    throw error;\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (options.platforms.includes('ios') && options.install && needsPodInstall) {\n    const { installCocoaPodsAsync } = await import('../utils/cocoapods');\n\n    podsInstalled = await installCocoaPodsAsync(projectRoot);\n  } else {\n    Log.debug('Skipped pod install');\n  }\n\n  return {\n    packageManager,\n    nodeInstall: !!options.install,\n    podInstall: !podsInstalled,\n    platforms: options.platforms,\n    hasNewProjectFiles,\n    exp,\n  };\n}\n"],"names":["prebuildAsync","Log","projectRoot","options","clean","maybeBailOnGitStatusAsync","clearNativeFolder","platforms","promptToClearMalformedNativeProjectsAsync","ensureValidPlatforms","assertPlatforms","exp","pkg","ensureConfigAsync","hasNewProjectFiles","needsPodInstall","hasNewDependencies","updateFromTemplateAsync","template","resolveTemplateOption","undefined","skipDependencyUpdate","packageManager","resolvePackageManager","install","npm","yarn","installNodeDependenciesAsync","configSyncingStep","logNewSection","profile","configureProjectAsync","succeed","error","fail","podsInstalled","includes","installCocoaPodsAsync","debug","nodeInstall","podInstall"],"mappings":"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"}