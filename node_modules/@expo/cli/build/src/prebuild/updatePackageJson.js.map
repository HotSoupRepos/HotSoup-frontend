{"version":3,"sources":["../../../src/prebuild/updatePackageJson.ts"],"sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { isModuleSymlinked } from '../utils/isModuleSymlinked';\nimport { logNewSection } from '../utils/ora';\n\nexport type DependenciesMap = { [key: string]: string | number };\n\nexport type PackageJsonModificationResults = DependenciesModificationResults & {\n  removedMainField: string | null;\n};\n\nexport type DependenciesModificationResults = {\n  /** Indicates that new values were added to the `dependencies` object in the `package.json`. */\n  hasNewDependencies: boolean;\n  /** Indicates that new values were added to the `devDependencies` object in the `package.json`. */\n  hasNewDevDependencies: boolean;\n};\n\n/** Modifies the `package.json` with `_modifyPackageJson` and format/displays the results. */\nexport async function updatePackageJSONAsync(\n  projectRoot: string,\n  {\n    templateDirectory,\n    pkg,\n    skipDependencyUpdate,\n  }: {\n    templateDirectory: string;\n    pkg: PackageJSONConfig;\n    skipDependencyUpdate?: string[];\n  }\n): Promise<DependenciesModificationResults> {\n  const updatingPackageJsonStep = logNewSection(\n    'Updating your package.json scripts, dependencies, and main file'\n  );\n\n  const templatePkg = getPackageJson(templateDirectory);\n\n  const results = _modifyPackageJson(projectRoot, {\n    templatePkg,\n    pkg,\n    skipDependencyUpdate,\n  });\n\n  await fs.promises.writeFile(\n    path.resolve(projectRoot, 'package.json'),\n    // Add new line to match the format of running yarn.\n    // This prevents the `package.json` from changing when running `prebuild --no-install` multiple times.\n    JSON.stringify(pkg, null, 2) + '\\n'\n  );\n\n  updatingPackageJsonStep.succeed(\n    'Updated package.json and added index.js entry point for iOS and Android'\n  );\n\n  if (results.removedMainField) {\n    Log.log(\n      `\\u203A Removed ${chalk.bold(\n        `\"main\": \"${results.removedMainField}\"`\n      )} from package.json because we recommend using index.js as main instead\\n`\n    );\n  }\n\n  return results;\n}\n\n/**\n * Make required modifications to the `package.json` file as a JSON object.\n *\n * 1. Update `package.json` `scripts`.\n * 2. Update `package.json` `dependencies` and `devDependencies`.\n * 3. Update `package.json` `main`.\n *\n * @param projectRoot The root directory of the project.\n * @param props.templatePkg Template project package.json as JSON.\n * @param props.pkg Current package.json as JSON.\n * @param props.skipDependencyUpdate Array of dependencies to skip updating.\n * @returns\n */\nfunction _modifyPackageJson(\n  projectRoot: string,\n  {\n    templatePkg,\n    pkg,\n    skipDependencyUpdate,\n  }: {\n    templatePkg: PackageJSONConfig;\n    pkg: PackageJSONConfig;\n    skipDependencyUpdate?: string[];\n  }\n): PackageJsonModificationResults {\n  updatePkgScripts({ pkg });\n\n  const results = updatePkgDependencies(projectRoot, {\n    pkg,\n    templatePkg,\n    skipDependencyUpdate,\n  });\n\n  const removedMainField = updatePkgMain({ pkg });\n\n  return { ...results, removedMainField };\n}\n\n/**\n * Update package.json dependencies by combining the dependencies in the project we are ejecting\n * with the dependencies in the template project. Does the same for devDependencies.\n *\n * - The template may have some dependencies beyond react/react-native/react-native-unimodules,\n *   for example RNGH and Reanimated. We should prefer the version that is already being used\n *   in the project for those, but swap the react/react-native/react-native-unimodules versions\n *   with the ones in the template.\n * - The same applies to expo-updates -- since some native project configuration may depend on the\n *   version, we should always use the version of expo-updates in the template.\n *\n * > Exposed for testing.\n */\nexport function updatePkgDependencies(\n  projectRoot: string,\n  {\n    pkg,\n    templatePkg,\n    skipDependencyUpdate = [],\n  }: {\n    pkg: PackageJSONConfig;\n    templatePkg: PackageJSONConfig;\n    skipDependencyUpdate?: string[];\n  }\n): DependenciesModificationResults {\n  if (!pkg.devDependencies) {\n    pkg.devDependencies = {};\n  }\n  const { dependencies, devDependencies } = templatePkg;\n  const defaultDependencies = createDependenciesMap(dependencies);\n  const defaultDevDependencies = createDependenciesMap(devDependencies);\n\n  const combinedDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDependencies,\n    ...pkg.dependencies,\n  });\n\n  const requiredDependencies = [\n    'react',\n    'react-native-unimodules',\n    'react-native',\n    'expo-updates',\n  ].filter((depKey) => !!defaultDependencies[depKey]);\n\n  const symlinkedPackages: string[] = [];\n\n  for (const dependenciesKey of requiredDependencies) {\n    if (\n      // If the local package.json defined the dependency that we want to overwrite...\n      pkg.dependencies?.[dependenciesKey]\n    ) {\n      if (\n        // Then ensure it isn't symlinked (i.e. the user has a custom version in their yarn workspace).\n        isModuleSymlinked(projectRoot, { moduleId: dependenciesKey, isSilent: true })\n      ) {\n        // If the package is in the project's package.json and it's symlinked, then skip overwriting it.\n        symlinkedPackages.push(dependenciesKey);\n        continue;\n      }\n      if (skipDependencyUpdate.includes(dependenciesKey)) {\n        continue;\n      }\n    }\n    combinedDependencies[dependenciesKey] = defaultDependencies[dependenciesKey];\n  }\n\n  if (symlinkedPackages.length) {\n    Log.log(\n      `\\u203A Using symlinked ${symlinkedPackages\n        .map((pkg) => chalk.bold(pkg))\n        .join(', ')} instead of recommended version(s).`\n    );\n  }\n\n  const combinedDevDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDevDependencies,\n    ...pkg.devDependencies,\n  });\n\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies =\n    hashForDependencyMap(pkg.dependencies) !== hashForDependencyMap(combinedDependencies);\n  const hasNewDevDependencies =\n    hashForDependencyMap(pkg.devDependencies) !== hashForDependencyMap(combinedDevDependencies);\n  // Save the dependencies\n  if (hasNewDependencies) {\n    // Use Object.assign to preserve the original order of dependencies, this makes it easier to see what changed in the git diff.\n    pkg.dependencies = Object.assign(pkg.dependencies ?? {}, combinedDependencies);\n  }\n  if (hasNewDevDependencies) {\n    // Same as with dependencies\n    pkg.devDependencies = Object.assign(pkg.devDependencies ?? {}, combinedDevDependencies);\n  }\n\n  return {\n    hasNewDependencies,\n    hasNewDevDependencies,\n  };\n}\n\n/**\n * Create an object of type DependenciesMap a dependencies object or throw if not valid.\n *\n * @param dependencies - ideally an object of type {[key]: string} - if not then this will error.\n */\nexport function createDependenciesMap(dependencies: any): DependenciesMap {\n  if (typeof dependencies !== 'object') {\n    throw new Error(`Dependency map is invalid, expected object but got ${typeof dependencies}`);\n  } else if (!dependencies) {\n    return {};\n  }\n\n  const outputMap: DependenciesMap = {};\n\n  for (const key of Object.keys(dependencies)) {\n    const value = dependencies[key];\n    if (typeof value === 'string') {\n      outputMap[key] = value;\n    } else {\n      throw new Error(\n        `Dependency for key \\`${key}\\` should be a \\`string\\`, instead got: \\`{ ${key}: ${JSON.stringify(\n          value\n        )} }\\``\n      );\n    }\n  }\n  return outputMap;\n}\n\n/**\n * Update package.json scripts - `npm start` should default to `expo\n * start --dev-client` rather than `expo start` after ejecting, for example.\n */\nfunction updatePkgScripts({ pkg }: { pkg: PackageJSONConfig }) {\n  if (!pkg.scripts) {\n    pkg.scripts = {};\n  }\n  if (!pkg.scripts.start?.includes('--dev-client')) {\n    pkg.scripts.start = 'expo start --dev-client';\n  }\n  if (!pkg.scripts.android?.includes('run')) {\n    pkg.scripts.android = 'expo run:android';\n  }\n  if (!pkg.scripts.ios?.includes('run')) {\n    pkg.scripts.ios = 'expo run:ios';\n  }\n}\n\n/**\n * Add new app entry points\n */\nfunction updatePkgMain({ pkg }: { pkg: PackageJSONConfig }): string | null {\n  let removedPkgMain: null | string = null;\n  // Check that the pkg.main doesn't match:\n  // - ./node_modules/expo/AppEntry\n  // - ./node_modules/expo/AppEntry.js\n  // - node_modules/expo/AppEntry.js\n  // - expo/AppEntry.js\n  // - expo/AppEntry\n  if (shouldDeleteMainField(pkg.main)) {\n    // Save the custom\n    removedPkgMain = pkg.main;\n    delete pkg.main;\n  }\n\n  return removedPkgMain;\n}\n\n/**\n * Returns true if the input string matches the default expo main field.\n *\n * - ./node_modules/expo/AppEntry\n * - ./node_modules/expo/AppEntry.js\n * - node_modules/expo/AppEntry.js\n * - expo/AppEntry.js\n * - expo/AppEntry\n *\n * @param input package.json main field\n */\nexport function isPkgMainExpoAppEntry(input?: string): boolean {\n  const main = input || '';\n  if (main.startsWith('./')) {\n    return main.includes('node_modules/expo/AppEntry');\n  }\n  return main.includes('expo/AppEntry');\n}\n\nfunction normalizeDependencyMap(deps: DependenciesMap): string[] {\n  return Object.keys(deps)\n    .map((dependency) => `${dependency}@${deps[dependency]}`)\n    .sort();\n}\n\nexport function hashForDependencyMap(deps: DependenciesMap = {}): string {\n  const depsList = normalizeDependencyMap(deps);\n  const depsString = depsList.join('\\n');\n  return createFileHash(depsString);\n}\n\nexport function createFileHash(contents: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  return crypto.createHash('sha1').update(contents).digest('hex');\n}\n\nexport function shouldDeleteMainField(main?: any): boolean {\n  if (!main || !isPkgMainExpoAppEntry(main)) {\n    return false;\n  }\n\n  return !main?.startsWith('index.');\n}\n"],"names":["updatePackageJSONAsync","updatePkgDependencies","createDependenciesMap","isPkgMainExpoAppEntry","hashForDependencyMap","createFileHash","shouldDeleteMainField","Log","projectRoot","templateDirectory","pkg","skipDependencyUpdate","updatingPackageJsonStep","logNewSection","templatePkg","getPackageJson","results","_modifyPackageJson","fs","promises","writeFile","path","resolve","JSON","stringify","succeed","removedMainField","log","chalk","bold","updatePkgScripts","updatePkgMain","devDependencies","dependencies","defaultDependencies","defaultDevDependencies","combinedDependencies","requiredDependencies","filter","depKey","symlinkedPackages","dependenciesKey","isModuleSymlinked","moduleId","isSilent","push","includes","length","map","join","combinedDevDependencies","hasNewDependencies","hasNewDevDependencies","Object","assign","Error","outputMap","key","keys","value","scripts","start","android","ios","removedPkgMain","main","input","startsWith","normalizeDependencyMap","deps","dependency","sort","depsList","depsString","contents","crypto","createHash","update","digest"],"mappings":"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"}