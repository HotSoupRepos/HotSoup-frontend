{"version":3,"sources":["../../../../../src/start/doctor/dependencies/getVersionedPackages.ts"],"sourcesContent":["import npmPackageArg from 'npm-package-arg';\n\nimport { getReleasedVersionsAsync, SDKVersion } from '../../../api/getVersions';\nimport * as Log from '../../../log';\nimport { getVersionedNativeModulesAsync } from './bundledNativeModules';\n\nexport type DependencyList = Record<string, string>;\n\n/** Adds `react-dom`, `react`, and `react-native` to the list of known package versions (`relatedPackages`) */\nfunction normalizeSdkVersionObject(version?: SDKVersion): Record<string, string> {\n  if (!version) {\n    return {};\n  }\n  const { relatedPackages, facebookReactVersion, facebookReactNativeVersion } = version;\n\n  const reactVersion = facebookReactVersion\n    ? {\n        react: facebookReactVersion,\n        'react-dom': facebookReactVersion,\n      }\n    : undefined;\n\n  return {\n    ...relatedPackages,\n    ...reactVersion,\n    'react-native': facebookReactNativeVersion,\n  };\n}\n\n/** Get the known versions for a given SDK, combines all sources. */\nexport async function getCombinedKnownVersionsAsync({\n  projectRoot,\n  sdkVersion,\n  skipCache,\n}: {\n  projectRoot: string;\n  sdkVersion?: string;\n  skipCache?: boolean;\n}) {\n  const bundledNativeModules = sdkVersion\n    ? await getVersionedNativeModulesAsync(projectRoot, sdkVersion)\n    : {};\n  const versionsForSdk = await getRemoteVersionsForSdkAsync({ sdkVersion, skipCache });\n  return {\n    ...versionsForSdk,\n    ...bundledNativeModules,\n  };\n}\n\n/** @returns a key/value list of known dependencies and their version (including range). */\nexport async function getRemoteVersionsForSdkAsync({\n  sdkVersion,\n  skipCache,\n}: { sdkVersion?: string; skipCache?: boolean } = {}): Promise<DependencyList> {\n  const sdkVersions = await getReleasedVersionsAsync({ skipCache });\n\n  // We only want versioned dependencies so skip if they cannot be found.\n  if (!sdkVersion || !(sdkVersion in sdkVersions)) {\n    Log.debug(\n      `Skipping versioned dependencies because the SDK version is not found. (sdkVersion: ${sdkVersion}, available: ${Object.keys(\n        sdkVersions\n      ).join(', ')})`\n    );\n    return {};\n  }\n\n  const version = sdkVersions[sdkVersion as keyof typeof sdkVersions] as unknown as SDKVersion;\n\n  return normalizeSdkVersionObject(version);\n}\n\n/**\n * Versions a list of `packages` against a given `sdkVersion` based on local and remote versioning resources.\n *\n * @param projectRoot\n * @param param1\n * @returns\n */\nexport async function getVersionedPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    sdkVersion,\n  }: {\n    /** List of npm packages to process. */\n    packages: string[];\n    /** Target SDK Version number to version the `packages` for. */\n    sdkVersion: string;\n  }\n): Promise<{ packages: string[]; messages: string[] }> {\n  const versionsForSdk = await getCombinedKnownVersionsAsync({\n    projectRoot,\n    sdkVersion,\n    skipCache: true,\n  });\n\n  let nativeModulesCount = 0;\n  let othersCount = 0;\n\n  const versionedPackages = packages.map((arg) => {\n    const { name, type, raw } = npmPackageArg(arg);\n\n    if (['tag', 'version', 'range'].includes(type) && name && versionsForSdk[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      // Some packages have the recommended version listed in https://exp.host/--/api/v2/versions.\n      nativeModulesCount++;\n      return `${name}@${versionsForSdk[name]}`;\n    } else {\n      // Other packages are passed through unmodified.\n      othersCount++;\n      return raw;\n    }\n  });\n\n  const messages = getOperationLog({\n    othersCount,\n    nativeModulesCount,\n    sdkVersion,\n  });\n\n  return {\n    packages: versionedPackages,\n    messages,\n  };\n}\n\n/** Craft a set of messages regarding the install operations. */\nexport function getOperationLog({\n  nativeModulesCount,\n  sdkVersion,\n  othersCount,\n}: {\n  nativeModulesCount: number;\n  othersCount: number;\n  sdkVersion: string;\n}): string[] {\n  return [\n    nativeModulesCount > 0 &&\n      `${nativeModulesCount} SDK ${sdkVersion} compatible native ${\n        nativeModulesCount === 1 ? 'module' : 'modules'\n      }`,\n    othersCount > 0 && `${othersCount} other ${othersCount === 1 ? 'package' : 'packages'}`,\n  ].filter(Boolean) as string[];\n}\n"],"names":["getCombinedKnownVersionsAsync","getRemoteVersionsForSdkAsync","getVersionedPackagesAsync","getOperationLog","Log","normalizeSdkVersionObject","version","relatedPackages","facebookReactVersion","facebookReactNativeVersion","reactVersion","react","undefined","projectRoot","sdkVersion","skipCache","bundledNativeModules","getVersionedNativeModulesAsync","versionsForSdk","sdkVersions","getReleasedVersionsAsync","debug","Object","keys","join","packages","nativeModulesCount","othersCount","versionedPackages","map","arg","name","type","raw","npmPackageArg","includes","messages","filter","Boolean"],"mappings":"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"}