{"version":3,"sources":["../../../../../src/start/doctor/typescript/TypeScriptProjectPrerequisite.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport * as Log from '../../../log';\nimport { fileExistsAsync } from '../../../utils/dir';\nimport { env } from '../../../utils/env';\nimport { everyMatchAsync, wrapGlobWithTimeout } from '../../../utils/glob';\nimport { ProjectPrerequisite } from '../Prerequisite';\nimport { ensureDependenciesAsync } from '../dependencies/ensureDependenciesAsync';\nimport { updateTSConfigAsync } from './updateTSConfig';\n\n/** Ensure the project has the required TypeScript support settings. */\nexport class TypeScriptProjectPrerequisite extends ProjectPrerequisite {\n  /** Ensure a project that hasn't explicitly disabled web support has all the required packages for running in the browser. */\n  async assertImplementation(): Promise<void> {\n    if (env.EXPO_NO_TYPESCRIPT_SETUP) {\n      Log.warn('Skipping TypeScript setup: EXPO_NO_TYPESCRIPT_SETUP is enabled.');\n      return;\n    }\n    Log.debug('Ensuring TypeScript support is setup');\n\n    const tsConfigPath = path.join(this.projectRoot, 'tsconfig.json');\n\n    // Ensure the project is TypeScript before continuing.\n    const intent = await this._getSetupRequirements();\n    if (!intent) {\n      return;\n    }\n\n    // Ensure TypeScript packages are installed\n    await this._ensureDependenciesInstalledAsync();\n\n    // Update the config\n    await updateTSConfigAsync({ tsConfigPath, isBootstrapping: intent.isBootstrapping });\n  }\n\n  /** Exposed for testing. */\n  async _getSetupRequirements(): Promise<{\n    /** Indicates that TypeScript support is being bootstrapped. */\n    isBootstrapping: boolean;\n  } | null> {\n    const tsConfigPath = await this._hasTSConfig();\n\n    // Enable TS setup if the project has a `tsconfig.json`\n    if (tsConfigPath) {\n      const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n        (txt) => txt.trim(),\n        // null when the file doesn't exist.\n        () => null\n      );\n      const isBlankConfig = content === '' || content === '{}';\n      return { isBootstrapping: isBlankConfig };\n    }\n    // This is a somewhat heavy check in larger projects.\n    // Test that this is reasonably paced by running expo start in `expo/apps/native-component-list`\n    const typescriptFile = await this._queryFirstTypeScriptFileAsync();\n    if (typescriptFile) {\n      return { isBootstrapping: true };\n    }\n\n    return null;\n  }\n\n  /** Exposed for testing. */\n  async _ensureDependenciesInstalledAsync({ exp }: { exp?: ExpoConfig } = {}): Promise<boolean> {\n    try {\n      return await ensureDependenciesAsync(this.projectRoot, {\n        exp,\n        installMessage: `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`,\n        warningMessage:\n          \"If you're not using TypeScript, please remove the TypeScript files from your project\",\n        requiredPackages: [\n          // use typescript/package.json to skip node module cache issues when the user installs\n          // the package and attempts to resolve the module in the same process.\n          { file: 'typescript/package.json', pkg: 'typescript' },\n          { file: '@types/react/index.d.ts', pkg: '@types/react' },\n          { file: '@types/react-native/index.d.ts', pkg: '@types/react-native' },\n        ],\n      });\n    } catch (error) {\n      // Reset the cached check so we can re-run the check if the user re-runs the command by pressing 'w' in the Terminal UI.\n      this.resetAssertion();\n      throw error;\n    }\n  }\n\n  /** Return the first TypeScript file in the project. */\n  async _queryFirstTypeScriptFileAsync(): Promise<null | string> {\n    const results = await wrapGlobWithTimeout(\n      () =>\n        // TODO(Bacon): Use `everyMatch` since a bug causes `anyMatch` to return inaccurate results when used multiple times.\n        everyMatchAsync('**/*.@(ts|tsx)', {\n          cwd: this.projectRoot,\n          ignore: [\n            '**/@(Carthage|Pods|node_modules)/**',\n            '**/*.d.ts',\n            '@(ios|android|web|web-build|dist)/**',\n          ],\n        }),\n      5000\n    );\n\n    if (results === false) {\n      return null;\n    }\n    return results[0] ?? null;\n  }\n\n  async _hasTSConfig(): Promise<string | null> {\n    const tsConfigPath = path.join(this.projectRoot, 'tsconfig.json');\n    if (await fileExistsAsync(tsConfigPath)) {\n      return tsConfigPath;\n    }\n    return null;\n  }\n}\n"],"names":["Log","TypeScriptProjectPrerequisite","ProjectPrerequisite","assertImplementation","env","EXPO_NO_TYPESCRIPT_SETUP","warn","debug","tsConfigPath","path","join","projectRoot","intent","_getSetupRequirements","_ensureDependenciesInstalledAsync","updateTSConfigAsync","isBootstrapping","_hasTSConfig","content","fs","readFile","encoding","then","txt","trim","isBlankConfig","typescriptFile","_queryFirstTypeScriptFileAsync","exp","ensureDependenciesAsync","installMessage","warningMessage","requiredPackages","file","pkg","error","resetAssertion","results","wrapGlobWithTimeout","everyMatchAsync","cwd","ignore","fileExistsAsync"],"mappings":"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"}