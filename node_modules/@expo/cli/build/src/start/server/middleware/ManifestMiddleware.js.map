{"version":3,"sources":["../../../../../src/start/server/middleware/ManifestMiddleware.ts"],"sourcesContent":["import { ExpoConfig, ExpoGoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport { resolve } from 'url';\n\nimport * as Log from '../../../log';\nimport { stripExtension } from '../../../utils/url';\nimport * as ProjectDevices from '../../project/devices';\nimport { UrlCreator } from '../UrlCreator';\nimport { ExpoMiddleware } from './ExpoMiddleware';\nimport { resolveGoogleServicesFile, resolveManifestAssets } from './resolveAssets';\nimport { resolveEntryPoint } from './resolveEntryPoint';\nimport { RuntimePlatform } from './resolvePlatform';\nimport { ServerHeaders, ServerNext, ServerRequest, ServerResponse } from './server.types';\n\n/** Info about the computer hosting the dev server. */\nexport interface HostInfo {\n  host: string;\n  server: 'expo';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\n/** Parsed values from the supported request headers. */\nexport interface ManifestRequestInfo {\n  /** Should return the signed manifest. */\n  acceptSignature: boolean;\n  /** Platform to serve. */\n  platform: RuntimePlatform;\n  /** Requested host name. */\n  hostname?: string | null;\n}\n\n/** Project related info. */\nexport type ResponseProjectSettings = {\n  expoGoConfig: ExpoGoConfig;\n  hostUri: string;\n  bundleUrl: string;\n  exp: ExpoConfig;\n};\n\nexport const DEVELOPER_TOOL = 'expo-cli';\n\nexport type ManifestMiddlewareOptions = {\n  /** Should start the dev servers in development mode (minify). */\n  mode?: 'development' | 'production';\n  /** Should instruct the bundler to create minified bundles. */\n  minify?: boolean;\n  constructUrl: UrlCreator['constructUrl'];\n  isNativeWebpack?: boolean;\n  privateKeyPath?: string;\n};\n\n/** Base middleware creator for serving the Expo manifest (like the index.html but for native runtimes). */\nexport abstract class ManifestMiddleware<\n  TManifestRequestInfo extends ManifestRequestInfo\n> extends ExpoMiddleware {\n  constructor(protected projectRoot: string, protected options: ManifestMiddlewareOptions) {\n    super(\n      projectRoot,\n      /**\n       * Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n       */\n      ['/', '/manifest', '/index.exp']\n    );\n  }\n\n  /** Exposed for testing. */\n  public async _resolveProjectSettingsAsync({\n    platform,\n    hostname,\n  }: Pick<TManifestRequestInfo, 'hostname' | 'platform'>): Promise<ResponseProjectSettings> {\n    // Read the config\n    const projectConfig = getConfig(this.projectRoot);\n\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName(projectConfig, platform);\n\n    // Create the manifest and set fields within it\n    const expoGoConfig = this.getExpoGoConfig({\n      mainModuleName,\n      hostname,\n    });\n\n    const hostUri = this.options.constructUrl({ scheme: '', hostname });\n\n    const bundleUrl = this._getBundleUrl({\n      platform,\n      mainModuleName,\n      hostname,\n    });\n\n    // Resolve all assets and set them on the manifest as URLs\n    await this.mutateManifestWithAssetsAsync(projectConfig.exp, bundleUrl);\n\n    return {\n      expoGoConfig,\n      hostUri,\n      bundleUrl,\n      exp: projectConfig.exp,\n    };\n  }\n\n  /** Get the main entry module ID (file) relative to the project root. */\n  private resolveMainModuleName(projectConfig: ProjectConfig, platform: string): string {\n    let entryPoint = resolveEntryPoint(this.projectRoot, platform, projectConfig);\n    // NOTE(Bacon): Webpack is currently hardcoded to index.bundle on native\n    // in the future (TODO) we should move this logic into a Webpack plugin and use\n    // a generated file name like we do on web.\n    // const server = getDefaultDevServer();\n    // // TODO: Move this into BundlerDevServer and read this info from self.\n    // const isNativeWebpack = server instanceof WebpackBundlerDevServer && server.isTargetingNative();\n    if (this.options.isNativeWebpack) {\n      entryPoint = 'index.js';\n    }\n\n    return stripExtension(entryPoint, 'js');\n  }\n\n  /** Parse request headers into options. */\n  public abstract getParsedHeaders(req: ServerRequest): TManifestRequestInfo;\n\n  /** Store device IDs that were sent in the request headers. */\n  private async saveDevicesAsync(req: ServerRequest) {\n    const deviceIds = req.headers?.['expo-dev-client-id'];\n    if (deviceIds) {\n      await ProjectDevices.saveDevicesAsync(this.projectRoot, deviceIds).catch((e) =>\n        Log.exception(e)\n      );\n    }\n  }\n\n  /** Create the bundle URL (points to the single JS entry file). Exposed for testing. */\n  public _getBundleUrl({\n    platform,\n    mainModuleName,\n    hostname,\n  }: {\n    platform: string;\n    hostname?: string | null;\n    mainModuleName: string;\n  }): string {\n    const queryParams = new URLSearchParams({\n      platform: encodeURIComponent(platform),\n      dev: String(this.options.mode !== 'production'),\n      // TODO: Is this still needed?\n      hot: String(false),\n    });\n\n    if (this.options.minify) {\n      queryParams.append('minify', String(this.options.minify));\n    }\n\n    const path = `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n\n    return (\n      this.options.constructUrl({\n        scheme: 'http',\n        // hostType: this.options.location.hostType,\n        hostname,\n      }) + path\n    );\n  }\n\n  /** Log telemetry. */\n  protected abstract trackManifest(version?: string): void;\n\n  /** Get the manifest response to return to the runtime. This file contains info regarding where the assets can be loaded from. Exposed for testing. */\n  public abstract _getManifestResponseAsync(options: TManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }>;\n\n  private getExpoGoConfig({\n    mainModuleName,\n    hostname,\n  }: {\n    mainModuleName: string;\n    hostname?: string | null;\n  }): ExpoGoConfig {\n    return {\n      // localhost:19000\n      debuggerHost: this.options.constructUrl({ scheme: '', hostname }),\n      // http://localhost:19000/logs -- used to send logs to the CLI for displaying in the terminal.\n      // This is deprecated in favor of the WebSocket connection setup in Metro.\n      logUrl: this.options.constructUrl({ scheme: 'http', hostname }) + '/logs',\n      // Required for Expo Go to function.\n      developer: {\n        tool: DEVELOPER_TOOL,\n        projectRoot: this.projectRoot,\n      },\n      packagerOpts: {\n        // Required for dev client.\n        dev: this.options.mode !== 'production',\n      },\n      // Indicates the name of the main bundle.\n      mainModuleName,\n      // Add this string to make Flipper register React Native / Metro as \"running\".\n      // Can be tested by running:\n      // `METRO_SERVER_PORT=19000 open -a flipper.app`\n      // Where 19000 is the port where the Expo project is being hosted.\n      __flipperHack: 'React Native packager is running',\n    };\n  }\n\n  /** Resolve all assets and set them on the manifest as URLs */\n  private async mutateManifestWithAssetsAsync(manifest: ExpoConfig, bundleUrl: string) {\n    await resolveManifestAssets(this.projectRoot, {\n      manifest,\n      resolver: async (path) => {\n        if (this.options.isNativeWebpack) {\n          // When using our custom dev server, just do assets normally\n          // without the `assets/` subpath redirect.\n          return resolve(bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0], path);\n        }\n        return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n      },\n    });\n    // The server normally inserts this but if we're offline we'll do it here\n    await resolveGoogleServicesFile(this.projectRoot, manifest);\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    // Save device IDs for dev client.\n    await this.saveDevicesAsync(req);\n\n    // Read from headers\n    const options = this.getParsedHeaders(req);\n    const { body, version, headers } = await this._getManifestResponseAsync(options);\n    for (const [headerName, headerValue] of headers) {\n      res.setHeader(headerName, headerValue);\n    }\n    res.end(body);\n\n    // Log analytics\n    this.trackManifest(version ?? null);\n  }\n}\n"],"names":["Log","ProjectDevices","DEVELOPER_TOOL","ManifestMiddleware","ExpoMiddleware","constructor","projectRoot","options","_resolveProjectSettingsAsync","platform","hostname","projectConfig","getConfig","mainModuleName","resolveMainModuleName","expoGoConfig","getExpoGoConfig","hostUri","constructUrl","scheme","bundleUrl","_getBundleUrl","mutateManifestWithAssetsAsync","exp","entryPoint","resolveEntryPoint","isNativeWebpack","stripExtension","saveDevicesAsync","req","deviceIds","headers","catch","e","exception","queryParams","URLSearchParams","encodeURIComponent","dev","String","mode","hot","minify","append","path","encodeURI","toString","debuggerHost","logUrl","developer","tool","packagerOpts","__flipperHack","manifest","resolveManifestAssets","resolver","resolve","match","resolveGoogleServicesFile","handleRequestAsync","res","next","getParsedHeaders","body","version","_getManifestResponseAsync","headerName","headerValue","setHeader","end","trackManifest"],"mappings":"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"}