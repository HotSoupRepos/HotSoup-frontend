{"version":3,"sources":["../../../../../src/start/server/middleware/InterstitialPageMiddleware.ts"],"sourcesContent":["import { ExpoConfig, getConfig, getNameFromConfig } from '@expo/config';\nimport { getRuntimeVersionNullable } from '@expo/config-plugins/build/utils/Updates';\nimport { readFile } from 'fs/promises';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { disableResponseCache, ExpoMiddleware } from './ExpoMiddleware';\nimport {\n  assertMissingRuntimePlatform,\n  assertRuntimePlatform,\n  parsePlatformHeader,\n  RuntimePlatform,\n} from './resolvePlatform';\nimport { ServerRequest, ServerResponse } from './server.types';\n\nexport const LoadingEndpoint = '/_expo/loading';\n\nfunction getRuntimeVersion(exp: ExpoConfig, platform: 'android' | 'ios' | null): string {\n  if (!platform) {\n    return 'Undetected';\n  }\n\n  return getRuntimeVersionNullable(exp, platform) ?? 'Undetected';\n}\n\nexport class InterstitialPageMiddleware extends ExpoMiddleware {\n  constructor(projectRoot: string) {\n    super(projectRoot, [LoadingEndpoint]);\n  }\n\n  /** Get the template HTML page and inject values. */\n  async _getPageAsync({\n    appName,\n    runtimeVersion,\n  }: {\n    appName: string;\n    runtimeVersion: string | null;\n  }): Promise<string> {\n    const templatePath =\n      // Production: This will resolve when installed in the project.\n      resolveFrom.silent(this.projectRoot, 'expo/static/loading-page/index.html') ??\n      // Development: This will resolve when testing locally.\n      path.resolve(__dirname, '../../../../../static/loading-page/index.html');\n    let content = (await readFile(templatePath)).toString('utf-8');\n\n    content = content.replace(/{{\\s*AppName\\s*}}/, appName);\n    content = content.replace(/{{\\s*RuntimeVersion\\s*}}/, runtimeVersion ?? '');\n    content = content.replace(/{{\\s*Path\\s*}}/, this.projectRoot);\n\n    return content;\n  }\n\n  /** Get settings for the page from the project config. */\n  _getProjectOptions(platform: RuntimePlatform): {\n    appName: string;\n    runtimeVersion: string | null;\n  } {\n    assertRuntimePlatform(platform);\n\n    const { exp } = getConfig(this.projectRoot);\n    const { appName } = getNameFromConfig(exp);\n    const runtimeVersion = getRuntimeVersion(exp, platform);\n\n    return {\n      appName: appName ?? 'App',\n      runtimeVersion,\n    };\n  }\n\n  async handleRequestAsync(req: ServerRequest, res: ServerResponse): Promise<void> {\n    res = disableResponseCache(res);\n    res.setHeader('Content-Type', 'text/html');\n\n    const platform = parsePlatformHeader(req);\n    assertMissingRuntimePlatform(platform);\n    assertRuntimePlatform(platform);\n\n    const { appName, runtimeVersion } = this._getProjectOptions(platform);\n    const content = await this._getPageAsync({ appName, runtimeVersion });\n    res.end(content);\n  }\n}\n"],"names":["LoadingEndpoint","getRuntimeVersion","exp","platform","getRuntimeVersionNullable","InterstitialPageMiddleware","ExpoMiddleware","constructor","projectRoot","_getPageAsync","appName","runtimeVersion","resolveFrom","templatePath","silent","path","resolve","__dirname","content","readFile","toString","replace","_getProjectOptions","assertRuntimePlatform","getConfig","getNameFromConfig","handleRequestAsync","req","res","disableResponseCache","setHeader","parsePlatformHeader","assertMissingRuntimePlatform","end"],"mappings":"AAAA;;;;;AAAyD,IAAA,OAAc,WAAd,cAAc,CAAA;AAC7B,IAAA,QAA0C,WAA1C,0CAA0C,CAAA;AAC3D,IAAA,SAAa,WAAb,aAAa,CAAA;AACrB,IAAA,KAAM,kCAAN,MAAM,EAAA;AACC,IAAA,YAAc,kCAAd,cAAc,EAAA;AAEe,IAAA,eAAkB,WAAlB,kBAAkB,CAAA;AAMhE,IAAA,gBAAmB,WAAnB,mBAAmB,CAAA;;;;;;AAGnB,MAAMA,eAAe,GAAG,gBAAgB,AAAC;QAAnCA,eAAe,GAAfA,eAAe;AAE5B,SAASC,iBAAiB,CAACC,GAAe,EAAEC,QAAkC,EAAU;IACtF,IAAI,CAACA,QAAQ,EAAE;QACb,OAAO,YAAY,CAAC;KACrB;QAEMC,GAAwC;IAA/C,OAAOA,CAAAA,GAAwC,GAAxCA,CAAAA,GAAAA,QAAyB,AAAe,CAAA,0BAAf,CAACF,GAAG,EAAEC,QAAQ,CAAC,YAAxCC,GAAwC,GAAI,YAAY,CAAC;CACjE;AAEM,MAAMC,0BAA0B,SAASC,eAAc,eAAA;IAC5DC,YAAYC,WAAmB,CAAE;QAC/B,KAAK,CAACA,WAAW,EAAE;YAACR,eAAe;SAAC,CAAC,CAAC;KACvC;IAED,oDAAoD,CACpD,MAAMS,aAAa,CAAC,EAClBC,OAAO,CAAA,EACPC,cAAc,CAAA,EAIf,EAAmB;YAEhB,+DAA+D;QAC/DC,GAA2E;QAF7E,MAAMC,YAAY,GAEhBD,CAAAA,GAA2E,GAA3EA,YAAW,QAAA,CAACE,MAAM,CAAC,IAAI,CAACN,WAAW,EAAE,qCAAqC,CAAC,YAA3EI,GAA2E,GAC3E,uDAAuD;QACvDG,KAAI,QAAA,CAACC,OAAO,CAACC,SAAS,EAAE,+CAA+C,CAAC,AAAC;QAC3E,IAAIC,OAAO,GAAG,CAAC,MAAMC,CAAAA,GAAAA,SAAQ,AAAc,CAAA,SAAd,CAACN,YAAY,CAAC,CAAC,CAACO,QAAQ,CAAC,OAAO,CAAC,AAAC;QAE/DF,OAAO,GAAGA,OAAO,CAACG,OAAO,sBAAsBX,OAAO,CAAC,CAAC;QACxDQ,OAAO,GAAGA,OAAO,CAACG,OAAO,6BAA6BV,cAAc,WAAdA,cAAc,GAAI,EAAE,CAAC,CAAC;QAC5EO,OAAO,GAAGA,OAAO,CAACG,OAAO,mBAAmB,IAAI,CAACb,WAAW,CAAC,CAAC;QAE9D,OAAOU,OAAO,CAAC;KAChB;IAED,yDAAyD,CACzDI,kBAAkB,CAACnB,QAAyB,EAG1C;QACAoB,CAAAA,GAAAA,gBAAqB,AAAU,CAAA,sBAAV,CAACpB,QAAQ,CAAC,CAAC;QAEhC,MAAM,EAAED,GAAG,CAAA,EAAE,GAAGsB,CAAAA,GAAAA,OAAS,AAAkB,CAAA,UAAlB,CAAC,IAAI,CAAChB,WAAW,CAAC,AAAC;QAC5C,MAAM,EAAEE,OAAO,CAAA,EAAE,GAAGe,CAAAA,GAAAA,OAAiB,AAAK,CAAA,kBAAL,CAACvB,GAAG,CAAC,AAAC;QAC3C,MAAMS,cAAc,GAAGV,iBAAiB,CAACC,GAAG,EAAEC,QAAQ,CAAC,AAAC;QAExD,OAAO;YACLO,OAAO,EAAEA,OAAO,WAAPA,OAAO,GAAI,KAAK;YACzBC,cAAc;SACf,CAAC;KACH;IAED,MAAMe,kBAAkB,CAACC,GAAkB,EAAEC,GAAmB,EAAiB;QAC/EA,GAAG,GAAGC,CAAAA,GAAAA,eAAoB,AAAK,CAAA,qBAAL,CAACD,GAAG,CAAC,CAAC;QAChCA,GAAG,CAACE,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAE3C,MAAM3B,QAAQ,GAAG4B,CAAAA,GAAAA,gBAAmB,AAAK,CAAA,oBAAL,CAACJ,GAAG,CAAC,AAAC;QAC1CK,CAAAA,GAAAA,gBAA4B,AAAU,CAAA,6BAAV,CAAC7B,QAAQ,CAAC,CAAC;QACvCoB,CAAAA,GAAAA,gBAAqB,AAAU,CAAA,sBAAV,CAACpB,QAAQ,CAAC,CAAC;QAEhC,MAAM,EAAEO,OAAO,CAAA,EAAEC,cAAc,CAAA,EAAE,GAAG,IAAI,CAACW,kBAAkB,CAACnB,QAAQ,CAAC,AAAC;QACtE,MAAMe,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC;YAAEC,OAAO;YAAEC,cAAc;SAAE,CAAC,AAAC;QACtEiB,GAAG,CAACK,GAAG,CAACf,OAAO,CAAC,CAAC;KAClB;CACF;QAxDYb,0BAA0B,GAA1BA,0BAA0B"}