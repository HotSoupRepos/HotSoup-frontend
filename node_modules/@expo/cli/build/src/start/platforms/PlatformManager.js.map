{"version":3,"sources":["../../../../src/start/platforms/PlatformManager.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport assert from 'assert';\n\nimport * as Log from '../../log';\nimport { logEvent } from '../../utils/analytics/rudderstackClient';\nimport { CommandError, UnimplementedError } from '../../utils/errors';\nimport { learnMore } from '../../utils/link';\nimport { AppIdResolver } from './AppIdResolver';\nimport { DeviceManager } from './DeviceManager';\n\nexport interface BaseOpenInCustomProps {\n  scheme?: string;\n  applicationId?: string | null;\n}\n\nexport interface BaseResolveDeviceProps<IDevice> {\n  /** Should prompt the user to select a device. */\n  shouldPrompt?: boolean;\n  /** The target device to use. */\n  device?: IDevice;\n}\n\n/** An abstract class for launching a URL on a device. */\nexport class PlatformManager<\n  IDevice,\n  IOpenInCustomProps extends BaseOpenInCustomProps = BaseOpenInCustomProps,\n  IResolveDeviceProps extends BaseResolveDeviceProps<IDevice> = BaseResolveDeviceProps<IDevice>\n> {\n  constructor(\n    protected projectRoot: string,\n    protected props: {\n      platform: 'ios' | 'android';\n      /** Get the base URL for the dev server hosting this platform manager. */\n      getDevServerUrl: () => string | null;\n      /** Expo Go URL */\n      getExpoGoUrl: () => string | null;\n      /** Dev Client */\n      getCustomRuntimeUrl: (props?: { scheme?: string }) => string | null;\n      /** Resolve a device, this function should automatically handle opening the device and asserting any system validations. */\n      resolveDeviceAsync: (\n        resolver?: Partial<IResolveDeviceProps>\n      ) => Promise<DeviceManager<IDevice>>;\n    }\n  ) {}\n\n  /** Returns the project application identifier or asserts that one is not defined. Exposed for testing. */\n  _getAppIdResolver(): AppIdResolver {\n    throw new UnimplementedError();\n  }\n\n  protected async openProjectInExpoGoAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    const url = this.props.getExpoGoUrl();\n    // This should never happen, but just in case...\n    assert(url, 'Could not get dev server URL');\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    deviceManager.logOpeningUrl(url);\n\n    // TODO: Expensive, we should only do this once.\n    const { exp } = getConfig(this.projectRoot);\n    const installedExpo = await deviceManager.ensureExpoGoAsync(exp.sdkVersion);\n\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    logEvent('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo,\n    });\n\n    return { url };\n  }\n\n  private async openProjectInCustomRuntimeAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {},\n    props: Partial<IOpenInCustomProps> = {}\n  ): Promise<{ url: string }> {\n    Log.debug(\n      `open custom (${Object.entries(props)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(', ')})`\n    );\n\n    let url = this.props.getCustomRuntimeUrl({ scheme: props.scheme });\n    // TODO: It's unclear why we do application id validation when opening with a URL\n    const applicationId = props.applicationId ?? (await this._getAppIdResolver().getAppIdAsync());\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n\n    if (!(await deviceManager.isAppInstalledAsync(applicationId))) {\n      throw new CommandError(\n        `The development client (${applicationId}) for this project is not installed. ` +\n          `Please build and install the client on the device first.\\n${learnMore(\n            'https://docs.expo.dev/development/build/'\n          )}`\n      );\n    }\n\n    // TODO: Rethink analytics\n    logEvent('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo: false,\n    });\n\n    if (!url) {\n      url = this._resolveAlternativeLaunchUrl(applicationId, props);\n    }\n\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return {\n      url,\n    };\n  }\n\n  /** Launch the project on a device given the input runtime. */\n  async openAsync(\n    options:\n      | {\n          runtime: 'expo' | 'web';\n        }\n      | {\n          runtime: 'custom';\n          props?: Partial<IOpenInCustomProps>;\n        },\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    Log.debug(\n      `open (runtime: ${options.runtime}, platform: ${this.props.platform}, device: %O, shouldPrompt: ${resolveSettings.shouldPrompt})`,\n      resolveSettings.device\n    );\n    if (options.runtime === 'expo') {\n      return this.openProjectInExpoGoAsync(resolveSettings);\n    } else if (options.runtime === 'web') {\n      return this.openWebProjectAsync(resolveSettings);\n    } else if (options.runtime === 'custom') {\n      return this.openProjectInCustomRuntimeAsync(resolveSettings, options.props);\n    } else {\n      throw new CommandError(`Invalid runtime target: ${options.runtime}`);\n    }\n  }\n\n  /** Open the current web project (Webpack) in a device . */\n  private async openWebProjectAsync(resolveSettings: Partial<IResolveDeviceProps> = {}): Promise<{\n    url: string;\n  }> {\n    const url = this.props.getDevServerUrl();\n    assert(url, 'Dev server is not running.');\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return { url };\n  }\n\n  /** If the launch URL cannot be determined (`custom` runtimes) then an alternative string can be provided to open the device. Often a device ID or activity to launch. Exposed for testing. */\n  _resolveAlternativeLaunchUrl(\n    applicationId: string,\n    props: Partial<IOpenInCustomProps> = {}\n  ): string {\n    throw new UnimplementedError();\n  }\n}\n"],"names":["Log","PlatformManager","constructor","projectRoot","props","_getAppIdResolver","UnimplementedError","openProjectInExpoGoAsync","resolveSettings","url","getExpoGoUrl","assert","deviceManager","resolveDeviceAsync","logOpeningUrl","exp","getConfig","installedExpo","ensureExpoGoAsync","sdkVersion","activateWindowAsync","openUrlAsync","logEvent","platform","openProjectInCustomRuntimeAsync","debug","Object","entries","map","k","v","join","getCustomRuntimeUrl","scheme","applicationId","getAppIdAsync","isAppInstalledAsync","CommandError","learnMore","_resolveAlternativeLaunchUrl","openAsync","options","runtime","shouldPrompt","device","openWebProjectAsync","getDevServerUrl"],"mappings":"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"}