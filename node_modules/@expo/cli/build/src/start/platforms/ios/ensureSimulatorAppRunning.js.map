{"version":3,"sources":["../../../../../src/start/platforms/ios/ensureSimulatorAppRunning.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Log from '../../../log';\nimport { waitForActionAsync } from '../../../utils/delay';\nimport { CommandError } from '../../../utils/errors';\nimport { Device } from './simctl';\n\n/** Open the Simulator.app and return when the system registers it as 'open'. */\nexport async function ensureSimulatorAppRunningAsync(\n  device: Partial<Pick<Device, 'udid'>>,\n  {\n    maxWaitTime,\n  }: {\n    maxWaitTime?: number;\n  } = {}\n): Promise<void> {\n  if (await isSimulatorAppRunningAsync()) {\n    return;\n  }\n\n  Log.log(`\\u203A Opening the iOS simulator, this might take a moment.`);\n\n  // In theory this would ensure the correct simulator is booted as well.\n  // This isn't theory though, this is Xcode.\n  await openSimulatorAppAsync(device);\n\n  if (!(await waitForSimulatorAppToStart({ maxWaitTime }))) {\n    throw new CommandError(\n      'SIMULATOR_TIMEOUT',\n      `Simulator app did not open fast enough. Try opening Simulator first, then running your app.`\n    );\n  }\n}\n\nasync function waitForSimulatorAppToStart({\n  maxWaitTime,\n}: { maxWaitTime?: number } = {}): Promise<boolean> {\n  return waitForActionAsync<boolean>({\n    interval: 50,\n    maxWaitTime,\n    action: isSimulatorAppRunningAsync,\n  });\n}\n\n// I think the app can be open while no simulators are booted.\nasync function isSimulatorAppRunningAsync(): Promise<boolean> {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch (error: any) {\n    if (error.message.includes('Application isnâ€™t running')) {\n      return false;\n    }\n    throw error;\n  }\n\n  return true;\n}\n\nasync function openSimulatorAppAsync(device: { udid?: string }) {\n  const args = ['-a', 'Simulator'];\n  if (device.udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', device.udid);\n  }\n  await spawnAsync('open', args);\n}\n"],"names":["ensureSimulatorAppRunningAsync","osascript","Log","device","maxWaitTime","isSimulatorAppRunningAsync","log","openSimulatorAppAsync","waitForSimulatorAppToStart","CommandError","waitForActionAsync","interval","action","zeroMeansNo","execAsync","trim","error","message","includes","args","udid","push","spawnAsync"],"mappings":"AAAA;;;;QASsBA,8BAA8B,GAA9BA,8BAA8B;AATxCC,IAAAA,SAAS,mCAAM,iBAAiB,EAAvB;AACE,IAAA,WAAmB,kCAAnB,mBAAmB,EAAA;AAE9BC,IAAAA,GAAG,mCAAM,cAAc,EAApB;AACoB,IAAA,MAAsB,WAAtB,sBAAsB,CAAA;AAC5B,IAAA,OAAuB,WAAvB,uBAAuB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI7C,eAAeF,8BAA8B,CAClDG,MAAqC,EACrC,EACEC,WAAW,CAAA,EAGZ,GAAG,EAAE,EACS;IACf,IAAI,MAAMC,0BAA0B,EAAE,EAAE;QACtC,OAAO;KACR;IAEDH,GAAG,CAACI,GAAG,CAAC,CAAC,2DAA2D,CAAC,CAAC,CAAC;IAEvE,uEAAuE;IACvE,2CAA2C;IAC3C,MAAMC,qBAAqB,CAACJ,MAAM,CAAC,CAAC;IAEpC,IAAI,CAAE,MAAMK,0BAA0B,CAAC;QAAEJ,WAAW;KAAE,CAAC,AAAC,EAAE;QACxD,MAAM,IAAIK,OAAY,aAAA,CACpB,mBAAmB,EACnB,CAAC,2FAA2F,CAAC,CAC9F,CAAC;KACH;CACF;AAED,eAAeD,0BAA0B,CAAC,EACxCJ,WAAW,CAAA,EACc,GAAG,EAAE,EAAoB;IAClD,OAAOM,CAAAA,GAAAA,MAAkB,AAIvB,CAAA,mBAJuB,CAAU;QACjCC,QAAQ,EAAE,EAAE;QACZP,WAAW;QACXQ,MAAM,EAAEP,0BAA0B;KACnC,CAAC,CAAC;CACJ;AAED,8DAA8D;AAC9D,eAAeA,0BAA0B,GAAqB;IAC5D,IAAI;QACF,MAAMQ,WAAW,GAAG,CAClB,MAAMZ,SAAS,CAACa,SAAS,CACvB,uEAAuE,CACxE,CACF,CAACC,IAAI,EAAE,AAAC;QACT,IAAIF,WAAW,KAAK,GAAG,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;KACF,CAAC,OAAOG,KAAK,EAAO;QACnB,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,gCAA2B,CAAC,EAAE;YACvD,OAAO,KAAK,CAAC;SACd;QACD,MAAMF,KAAK,CAAC;KACb;IAED,OAAO,IAAI,CAAC;CACb;AAED,eAAeT,qBAAqB,CAACJ,MAAyB,EAAE;IAC9D,MAAMgB,IAAI,GAAG;QAAC,IAAI;QAAE,WAAW;KAAC,AAAC;IACjC,IAAIhB,MAAM,CAACiB,IAAI,EAAE;QACf,oDAAoD;QACpDD,IAAI,CAACE,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAElB,MAAM,CAACiB,IAAI,CAAC,CAAC;KACxD;IACD,MAAME,CAAAA,GAAAA,WAAU,AAAc,CAAA,QAAd,CAAC,MAAM,EAAEH,IAAI,CAAC,CAAC;CAChC"}