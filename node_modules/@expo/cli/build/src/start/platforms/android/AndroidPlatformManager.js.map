{"version":3,"sources":["../../../../../src/start/platforms/android/AndroidPlatformManager.ts"],"sourcesContent":["import { AppIdResolver } from '../AppIdResolver';\nimport { BaseOpenInCustomProps, BaseResolveDeviceProps, PlatformManager } from '../PlatformManager';\nimport { AndroidAppIdResolver } from './AndroidAppIdResolver';\nimport { AndroidDeviceManager } from './AndroidDeviceManager';\nimport { Device } from './adb';\nimport { startAdbReverseAsync } from './adbReverse';\n\ninterface AndroidOpenInCustomProps extends BaseOpenInCustomProps {\n  launchActivity?: string;\n}\n\nexport class AndroidPlatformManager extends PlatformManager<Device, AndroidOpenInCustomProps> {\n  constructor(\n    protected projectRoot: string,\n    protected port: number,\n    options: {\n      /** Get the base URL for the dev server hosting this platform manager. */\n      getDevServerUrl: () => string | null;\n      /** Expo Go URL. */\n      getExpoGoUrl: () => string | null;\n      /** Dev Client URL. */\n      getCustomRuntimeUrl: (props?: { scheme?: string }) => string | null;\n    }\n  ) {\n    super(projectRoot, {\n      platform: 'android',\n      ...options,\n      resolveDeviceAsync: AndroidDeviceManager.resolveAsync,\n    });\n  }\n\n  async openAsync(\n    options:\n      | { runtime: 'expo' | 'web' }\n      | { runtime: 'custom'; props?: Partial<AndroidOpenInCustomProps> },\n    resolveSettings?: Partial<BaseResolveDeviceProps<Device>>\n  ): Promise<{ url: string }> {\n    await startAdbReverseAsync([this.port]);\n    return super.openAsync(options, resolveSettings);\n  }\n\n  _getAppIdResolver(): AppIdResolver {\n    return new AndroidAppIdResolver(this.projectRoot);\n  }\n\n  _resolveAlternativeLaunchUrl(\n    applicationId: string,\n    props?: Partial<AndroidOpenInCustomProps>\n  ): string {\n    return props?.launchActivity ?? `${applicationId}/.MainActivity`;\n  }\n}\n"],"names":["AndroidPlatformManager","PlatformManager","constructor","projectRoot","port","options","platform","resolveDeviceAsync","AndroidDeviceManager","resolveAsync","openAsync","resolveSettings","startAdbReverseAsync","_getAppIdResolver","AndroidAppIdResolver","_resolveAlternativeLaunchUrl","applicationId","props","launchActivity"],"mappings":"AAAA;;;;AAC+E,IAAA,gBAAoB,WAApB,oBAAoB,CAAA;AAC9D,IAAA,qBAAwB,WAAxB,wBAAwB,CAAA;AACxB,IAAA,qBAAwB,WAAxB,wBAAwB,CAAA;AAExB,IAAA,WAAc,WAAd,cAAc,CAAA;AAM5C,MAAMA,sBAAsB,SAASC,gBAAe,gBAAA;IACzDC,YACYC,WAAmB,EACnBC,IAAY,EACtBC,OAOC,CACD;QACA,KAAK,CAACF,WAAW,EAAE;YACjBG,QAAQ,EAAE,SAAS;YACnB,GAAGD,OAAO;YACVE,kBAAkB,EAAEC,qBAAoB,qBAAA,CAACC,YAAY;SACtD,CAAC,CAAC;aAfON,WAAmB,GAAnBA,WAAmB;aACnBC,IAAY,GAAZA,IAAY;KAevB;IAED,MAAMM,SAAS,CACbL,OAEoE,EACpEM,eAAyD,EAC/B;QAC1B,MAAMC,CAAAA,GAAAA,WAAoB,AAAa,CAAA,qBAAb,CAAC;YAAC,IAAI,CAACR,IAAI;SAAC,CAAC,CAAC;QACxC,OAAO,KAAK,CAACM,SAAS,CAACL,OAAO,EAAEM,eAAe,CAAC,CAAC;KAClD;IAEDE,iBAAiB,GAAkB;QACjC,OAAO,IAAIC,qBAAoB,qBAAA,CAAC,IAAI,CAACX,WAAW,CAAC,CAAC;KACnD;IAEDY,4BAA4B,CAC1BC,aAAqB,EACrBC,KAAyC,EACjC;YACDA,GAAqB;QAA5B,OAAOA,CAAAA,GAAqB,GAArBA,KAAK,QAAgB,GAArBA,KAAAA,CAAqB,GAArBA,KAAK,CAAEC,cAAc,YAArBD,GAAqB,GAAI,CAAC,EAAED,aAAa,CAAC,cAAc,CAAC,CAAC;KAClE;CACF;QAxCYhB,sBAAsB,GAAtBA,sBAAsB"}