{"version":3,"sources":["../../../../../src/start/platforms/android/AndroidDeviceManager.ts"],"sourcesContent":["import assert from 'assert';\nimport chalk from 'chalk';\n\nimport * as Log from '../../../log';\nimport { AbortCommandError, CommandError } from '../../../utils/errors';\nimport { validateUrl } from '../../../utils/url';\nimport { DeviceManager } from '../DeviceManager';\nimport { ExpoGoInstaller } from '../ExpoGoInstaller';\nimport { BaseResolveDeviceProps } from '../PlatformManager';\nimport { activateWindowAsync } from './activateWindow';\nimport * as AndroidDebugBridge from './adb';\nimport { startDeviceAsync } from './emulator';\nimport { getDevicesAsync } from './getDevices';\nimport { promptForDeviceAsync } from './promptAndroidDevice';\n\nconst EXPO_GO_APPLICATION_IDENTIFIER = 'host.exp.exponent';\n\nexport class AndroidDeviceManager extends DeviceManager<AndroidDebugBridge.Device> {\n  static async resolveFromNameAsync(name: string): Promise<AndroidDeviceManager> {\n    const devices = await getDevicesAsync();\n    const device = devices.find((device) => device.name === name);\n\n    if (!device) {\n      throw new CommandError('Could not find device with name: ' + name);\n    }\n    return AndroidDeviceManager.resolveAsync({ device, shouldPrompt: false });\n  }\n\n  static async resolveAsync({\n    device,\n    shouldPrompt,\n  }: BaseResolveDeviceProps<AndroidDebugBridge.Device> = {}): Promise<AndroidDeviceManager> {\n    if (device) {\n      const manager = new AndroidDeviceManager(device);\n      if (!(await manager.attemptToStartAsync())) {\n        throw new AbortCommandError();\n      }\n      return manager;\n    }\n\n    const devices = await getDevicesAsync();\n    const _device = shouldPrompt ? await promptForDeviceAsync(devices) : devices[0];\n    return AndroidDeviceManager.resolveAsync({ device: _device, shouldPrompt: false });\n  }\n\n  get name() {\n    // TODO: Maybe strip `_` from the device name?\n    return this.device.name;\n  }\n\n  get identifier(): string {\n    return this.device.pid ?? 'unknown';\n  }\n\n  async getAppVersionAsync(applicationId: string): Promise<string | null> {\n    const info = await AndroidDebugBridge.getPackageInfoAsync(this.device, {\n      appId: applicationId,\n    });\n\n    const regex = /versionName=([0-9.]+)/;\n    return regex.exec(info)?.[1] ?? null;\n  }\n\n  protected async attemptToStartAsync(): Promise<AndroidDebugBridge.Device | null> {\n    // TODO: Add a light-weight method for checking since a device could disconnect.\n    if (!(await AndroidDebugBridge.isDeviceBootedAsync(this.device))) {\n      this.device = await startDeviceAsync(this.device);\n    }\n\n    if (this.device.isAuthorized === false) {\n      AndroidDebugBridge.logUnauthorized(this.device);\n      return null;\n    }\n\n    return this.device;\n  }\n\n  async startAsync(): Promise<AndroidDebugBridge.Device> {\n    const device = await this.attemptToStartAsync();\n    assert(device, `Failed to boot emulator.`);\n    return this.device;\n  }\n\n  async installAppAsync(binaryPath: string) {\n    await AndroidDebugBridge.installAsync(this.device, {\n      filePath: binaryPath,\n    });\n  }\n\n  async uninstallAppAsync(appId: string) {\n    // we need to check if the app is installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n    const isInstalled = await this.isAppInstalledAsync(appId);\n    if (!isInstalled) {\n      return;\n    }\n\n    try {\n      await AndroidDebugBridge.uninstallAsync(this.device, {\n        appId,\n      });\n    } catch (e) {\n      Log.error(\n        `Could not uninstall app \"${appId}\" from your device, please uninstall it manually and try again.`\n      );\n      throw e;\n    }\n  }\n\n  /**\n   * @param launchActivity Activity to launch `[application identifier]/.[main activity name]`, ex: `com.bacon.app/.MainActivity`\n   */\n  async launchActivityAsync(launchActivity: string): Promise<string> {\n    try {\n      return await AndroidDebugBridge.launchActivityAsync(this.device, {\n        launchActivity,\n      });\n    } catch (error: any) {\n      let errorMessage = `Couldn't open Android app with activity \"${launchActivity}\" on device \"${this.name}\".`;\n      if (error instanceof CommandError && error.code === 'APP_NOT_INSTALLED') {\n        errorMessage += `\\nThe app might not be installed, try installing it with: ${chalk.bold(\n          `npx expo run:android -d ${this.name}`\n        )}`;\n      }\n      errorMessage += chalk.gray(`\\n${error.message}`);\n      error.message = errorMessage;\n      throw error;\n    }\n  }\n\n  async isAppInstalledAsync(applicationId: string) {\n    return await AndroidDebugBridge.isPackageInstalledAsync(this.device, applicationId);\n  }\n\n  async openUrlAsync(url: string) {\n    // Non-compliant URLs will be treated as application identifiers.\n    if (!validateUrl(url, { requireProtocol: true })) {\n      await this.launchActivityAsync(url);\n      return;\n    }\n\n    const parsed = new URL(url);\n\n    if (parsed.protocol === 'exp:') {\n      // NOTE(brentvatne): temporary workaround! launch Expo Go first, then\n      // launch the project!\n      // https://github.com/expo/expo/issues/7772\n      // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n      // Note: this is not needed in Expo Development Client, it only applies to Expo Go\n      await AndroidDebugBridge.openAppIdAsync(\n        { pid: this.device.pid },\n        { applicationId: EXPO_GO_APPLICATION_IDENTIFIER }\n      );\n    }\n\n    await AndroidDebugBridge.openUrlAsync({ pid: this.device.pid }, { url });\n  }\n\n  async activateWindowAsync() {\n    // Bring the emulator window to the front on macos devices.\n    await activateWindowAsync(this.device);\n  }\n\n  async ensureExpoGoAsync(sdkVersion?: string): Promise<boolean> {\n    const installer = new ExpoGoInstaller('android', EXPO_GO_APPLICATION_IDENTIFIER, sdkVersion);\n    return installer.ensureAsync(this);\n  }\n}\n"],"names":["Log","AndroidDebugBridge","EXPO_GO_APPLICATION_IDENTIFIER","AndroidDeviceManager","DeviceManager","resolveFromNameAsync","name","devices","getDevicesAsync","device","find","CommandError","resolveAsync","shouldPrompt","manager","attemptToStartAsync","AbortCommandError","_device","promptForDeviceAsync","identifier","pid","getAppVersionAsync","applicationId","regex","info","getPackageInfoAsync","appId","exec","isDeviceBootedAsync","startDeviceAsync","isAuthorized","logUnauthorized","startAsync","assert","installAppAsync","binaryPath","installAsync","filePath","uninstallAppAsync","isInstalled","isAppInstalledAsync","uninstallAsync","e","error","launchActivityAsync","launchActivity","errorMessage","code","chalk","bold","gray","message","isPackageInstalledAsync","openUrlAsync","url","validateUrl","requireProtocol","parsed","URL","protocol","openAppIdAsync","activateWindowAsync","ensureExpoGoAsync","sdkVersion","installer","ExpoGoInstaller","ensureAsync"],"mappings":"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"}