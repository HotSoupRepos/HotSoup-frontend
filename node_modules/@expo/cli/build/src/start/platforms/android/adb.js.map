{"version":3,"sources":["../../../../../src/start/platforms/android/adb.ts"],"sourcesContent":["import chalk from 'chalk';\nimport os from 'os';\n\nimport * as Log from '../../../log';\nimport { CommandError } from '../../../utils/errors';\nimport { learnMore } from '../../../utils/link';\nimport { ADBServer } from './ADBServer';\n\nexport enum DeviceABI {\n  // The arch specific android target platforms are soft-deprecated.\n  // Instead of using TargetPlatform as a combination arch + platform\n  // the code will be updated to carry arch information in [DarwinArch]\n  // and [AndroidArch].\n  arm = 'arm',\n  arm64 = 'arm64',\n  x64 = 'x64',\n  x86 = 'x86',\n  armeabiV7a = 'armeabi-v7a',\n  armeabi = 'armeabi',\n  universal = 'universal',\n}\n\n/** Represents a connected Android device. */\nexport type Device = {\n  /** Process ID. */\n  pid?: string;\n  /** Name of the device, also used as the ID for opening devices. */\n  name: string;\n  /** Is emulator or connected device. */\n  type: 'emulator' | 'device';\n  /** Is the device booted (emulator). */\n  isBooted: boolean;\n  /** Is device authorized for developing. https://expo.fyi/authorize-android-device */\n  isAuthorized: boolean;\n};\n\ntype DeviceContext = Pick<Device, 'pid'>;\n\ntype DeviceProperties = Record<string, string>;\n\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_CPU_NAME = 'ro.product.cpu.abi';\n\nconst PROP_CPU_ABI_LIST_NAME = 'ro.product.cpu.abilist';\n\n// Can sometimes be null\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_BOOT_ANIMATION_STATE = 'init.svc.bootanim';\n\nlet _server: ADBServer | null;\n\n/** Return the lazily loaded ADB server instance. */\nexport function getServer() {\n  _server ??= new ADBServer();\n  return _server;\n}\n\n/** Logs an FYI message about authorizing your device. */\nexport function logUnauthorized(device: Device) {\n  Log.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n/** Returns true if the provided package name is installed on the provided Android device. */\nexport async function isPackageInstalledAsync(\n  device: DeviceContext,\n  androidPackage: string\n): Promise<boolean> {\n  const packages = await getServer().runAsync(\n    adbArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param device.pid Process ID of the Android device to launch.\n * @param props.launchActivity Activity to launch `[application identifier]/.[main activity name]`, ex: `com.bacon.app/.MainActivity`\n */\nexport async function launchActivityAsync(\n  device: DeviceContext,\n  {\n    launchActivity,\n  }: {\n    launchActivity: string;\n  }\n) {\n  return openAsync(\n    adbArgs(\n      device.pid,\n      'shell',\n      'am',\n      'start',\n      '-a',\n      'android.intent.action.RUN',\n      // FLAG_ACTIVITY_SINGLE_TOP -- If set, the activity will not be launched if it is already running at the top of the history stack.\n      '-f',\n      '0x20000000',\n      // Activity to open first: com.bacon.app/.MainActivity\n      '-n',\n      launchActivity\n    )\n  );\n}\n\n/**\n * @param device.pid Process ID of the Android device to launch.\n * @param props.applicationId package name to launch.\n */\nexport async function openAppIdAsync(\n  device: DeviceContext,\n  {\n    applicationId,\n  }: {\n    applicationId: string;\n  }\n) {\n  return openAsync(\n    adbArgs(\n      device.pid,\n      'shell',\n      'monkey',\n      '-p',\n      applicationId,\n      '-c',\n      'android.intent.category.LAUNCHER',\n      '1'\n    )\n  );\n}\n\n/**\n * @param device.pid Process ID of the Android device to launch.\n * @param props.url URL to launch.\n */\nexport async function openUrlAsync(\n  device: DeviceContext,\n  {\n    url,\n  }: {\n    url: string;\n  }\n) {\n  return openAsync(\n    adbArgs(device.pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n}\n\n/** Runs a generic command watches for common errors in order to throw with an expected code. */\nasync function openAsync(args: string[]): Promise<string> {\n  const results = await getServer().runAsync(args);\n  if (\n    results.includes(CANT_START_ACTIVITY_ERROR) ||\n    results.match(/Error: Activity class .* does not exist\\./g)\n  ) {\n    throw new CommandError('APP_NOT_INSTALLED', results.substring(results.indexOf('Error: ')));\n  }\n  return results;\n}\n\n/** Uninstall an app given its Android package name. */\nexport async function uninstallAsync(\n  device: DeviceContext,\n  { appId }: { appId: string }\n): Promise<string> {\n  return await getServer().runAsync(adbArgs(device.pid, 'uninstall', appId));\n}\n\n/** Get package info from an app based on its Android package name. */\nexport async function getPackageInfoAsync(\n  device: DeviceContext,\n  { appId }: { appId: string }\n): Promise<string> {\n  return await getServer().runAsync(adbArgs(device.pid, 'shell', 'dumpsys', 'package', appId));\n}\n\n/** Install an app on a connected device. */\nexport async function installAsync(device: DeviceContext, { filePath }: { filePath: string }) {\n  // TODO: Handle the `INSTALL_FAILED_INSUFFICIENT_STORAGE` error.\n  return await getServer().runAsync(adbArgs(device.pid, 'install', '-r', '-d', filePath));\n}\n\n/** Format ADB args with process ID. */\nexport function adbArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getServer().runAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map((line) => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async (props) => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find((info) => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAdbNameForDeviceIdAsync({ pid })) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param device.pid a value like `emulator-5554` from `abd devices`\n */\nexport async function getAdbNameForDeviceIdAsync(device: DeviceContext): Promise<string | null> {\n  const results = await getServer().runAsync(adbArgs(device.pid, 'emu', 'avd', 'name'));\n\n  if (results.match(/could not connect to TCP port .*: Connection refused/)) {\n    // Can also occur when the emulator does not exist.\n    throw new CommandError('EMULATOR_NOT_FOUND', results);\n  }\n\n  return results.trim().split(/\\r?\\n/).shift() ?? null;\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find((device) => device.name === name) ?? null;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nexport async function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const props = await getPropertyDataForDeviceAsync({ pid }, PROP_BOOT_ANIMATION_STATE);\n    return !!props[PROP_BOOT_ANIMATION_STATE].match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\n/** Get a list of ABIs for the provided device. */\nexport async function getDeviceABIsAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<DeviceABI[]> {\n  const cpuAbiList = (await getPropertyDataForDeviceAsync(device, PROP_CPU_ABI_LIST_NAME))[\n    PROP_CPU_ABI_LIST_NAME\n  ];\n\n  if (cpuAbiList) {\n    return cpuAbiList.trim().split(',') as DeviceABI[];\n  }\n\n  const abi = (await getPropertyDataForDeviceAsync(device, PROP_CPU_NAME))[\n    PROP_CPU_NAME\n  ] as DeviceABI;\n  return [abi];\n}\n\nexport async function getPropertyDataForDeviceAsync(\n  device: DeviceContext,\n  prop?: string\n): Promise<DeviceProperties> {\n  // @ts-ignore\n  const propCommand = adbArgs(...[device.pid, 'shell', 'getprop', prop].filter(Boolean));\n  try {\n    // Prevent reading as UTF8.\n    const results = await getServer().getFileOutputAsync(propCommand);\n    // Like:\n    // [wifi.direct.interface]: [p2p-dev-wlan0]\n    // [wifi.interface]: [wlan0]\n\n    if (prop) {\n      Log.debug(\n        `[ADB] property data: (device pid: ${device.pid}, prop: ${prop}, data: ${results})`\n      );\n      return {\n        [prop]: results,\n      };\n    }\n    const props = parseAdbDeviceProperties(results);\n\n    Log.debug(`[ADB] parsed data:`, props);\n\n    return props;\n  } catch (error: any) {\n    // TODO: Ensure error has message and not stderr\n    throw new CommandError(`Failed to get properties for device (${device.pid}): ${error.message}`);\n  }\n}\n\nfunction parseAdbDeviceProperties(devicePropertiesString: string) {\n  const properties: DeviceProperties = {};\n  const propertyExp = /\\[(.*?)\\]: \\[(.*?)\\]/gm;\n  for (const match of devicePropertiesString.matchAll(propertyExp)) {\n    properties[match[1]] = match[2];\n  }\n  return properties;\n}\n"],"names":["getServer","logUnauthorized","isPackageInstalledAsync","launchActivityAsync","openAppIdAsync","openUrlAsync","uninstallAsync","getPackageInfoAsync","installAsync","adbArgs","getAttachedDevicesAsync","getAdbNameForDeviceIdAsync","isDeviceBootedAsync","isBootAnimationCompleteAsync","getDeviceABIsAsync","getPropertyDataForDeviceAsync","Log","DeviceABI","arm","arm64","x64","x86","armeabiV7a","armeabi","universal","CANT_START_ACTIVITY_ERROR","PROP_CPU_NAME","PROP_CPU_ABI_LIST_NAME","PROP_BOOT_ANIMATION_STATE","_server","ADBServer","device","warn","chalk","bold","name","dim","learnMore","androidPackage","packages","runAsync","pid","lines","split","i","length","line","trim","launchActivity","openAsync","applicationId","url","args","results","includes","match","CommandError","substring","indexOf","appId","filePath","options","push","concat","output","splitItems","replace","os","EOL","attachedDevices","slice","map","props","filter","Boolean","isAuthorized","type","devicePromises","deviceInfo","modelItem","find","info","isBooted","Promise","all","shift","devices","cpuAbiList","abi","prop","propCommand","getFileOutputAsync","debug","parseAdbDeviceProperties","error","message","devicePropertiesString","properties","propertyExp","matchAll"],"mappings":"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"}