{"version":3,"sources":["../../../src/start/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../utils/args';\nimport { logCmdError } from '../utils/errors';\n\nexport const expoStart: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--clear': Boolean,\n      '--max-workers': Number,\n      '--no-dev': Boolean,\n      '--minify': Boolean,\n      '--https': Boolean,\n      '--force-manifest-type': String,\n      '--private-key-path': String,\n      '--port': Number,\n      '--dev-client': Boolean,\n      '--scheme': String,\n      '--android': Boolean,\n      '--ios': Boolean,\n      '--web': Boolean,\n      '--host': String,\n      '--tunnel': Boolean,\n      '--lan': Boolean,\n      '--localhost': Boolean,\n      '--offline': Boolean,\n      // Aliases\n      '-h': '--help',\n      '-c': '--clear',\n      '-p': '--port',\n      '-a': '--android',\n      '-i': '--ios',\n      '-w': '--web',\n      '-m': '--host',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Start a local dev server for the app`,\n      chalk`npx expo start {dim <dir>}`,\n      [\n        chalk`<dir>                                  Directory of the Expo project. {dim Default: Current working directory}`,\n        `-a, --android                          Opens your app in Expo Go on a connected Android device`,\n        `-i, --ios                              Opens your app in Expo Go in a currently running iOS simulator on your computer`,\n        `-w, --web                              Opens your app in a web browser`,\n        ``,\n        `-c, --clear                            Clear the bundler cache`,\n        `--max-workers <num>                    Maximum number of tasks to allow Metro to spawn`,\n        `--no-dev                               Bundle in production mode`,\n        `--minify                               Minify JavaScript`,\n        ``,\n        chalk`-m, --host <mode>                      Dev server hosting type. {dim Default: lan}`,\n        chalk`                                       {bold lan}: Use the local network`,\n        chalk`                                       {bold tunnel}: Use any network by tunnel through ngrok`,\n        chalk`                                       {bold localhost}: Connect to the dev server over localhost`,\n        `--tunnel                               Same as --host tunnel`,\n        `--lan                                  Same as --host lan`,\n        `--localhost                            Same as --host localhost`,\n        ``,\n        `--offline                              Skip network requests and use anonymous manifest signatures`,\n        `--https                                Start the dev server with https protocol`,\n        `--scheme <scheme>                      Custom URI protocol to use when launching an app`,\n        chalk`-p, --port <port>                      Port to start the dev server on (does not apply to web or tunnel). {dim Default: 19000}`,\n        ``,\n        chalk`--dev-client                           {yellow Experimental:} Starts the bundler for use with the expo-development-client`,\n        `--force-manifest-type <manifest-type>  Override auto detection of manifest type`,\n        `--private-key-path <path>              Path to private key for code signing. Default: \"private-key.pem\" in the same directory as the certificate specified by the expo-updates configuration in app.json.`,\n        `-h, --help                             Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  const projectRoot = getProjectRoot(args);\n  const { resolveOptionsAsync } = await import('./resolveOptions');\n  const options = await resolveOptionsAsync(projectRoot, args).catch(logCmdError);\n\n  const { APISettings } = await import('../api/settings');\n  APISettings.isOffline = options.offline;\n\n  const { startAsync } = await import('./startAsync');\n  return startAsync(projectRoot, options, { webOnly: false }).catch(logCmdError);\n};\n"],"names":["expoStart","argv","args","assertArgs","Boolean","Number","String","printHelp","chalk","join","projectRoot","getProjectRoot","resolveOptionsAsync","options","catch","logCmdError","APISettings","isOffline","offline","startAsync","webOnly"],"mappings":"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"}