{"version":3,"sources":["../../../src/start/resolveOptions.ts"],"sourcesContent":["import assert from 'assert';\n\nimport { AbortCommandError, CommandError } from '../utils/errors';\nimport { resolvePortAsync } from '../utils/port';\n\nexport type Options = {\n  forceManifestType: 'classic' | 'expo-updates';\n  privateKeyPath: string | null;\n  android: boolean;\n  web: boolean;\n  ios: boolean;\n  offline: boolean;\n  clear: boolean;\n  dev: boolean;\n  https: boolean;\n  maxWorkers: number;\n  port: number;\n  /** Should instruct the bundler to create minified bundles. */\n  minify: boolean;\n  devClient: boolean;\n  scheme: string | null;\n  host: 'localhost' | 'lan' | 'tunnel';\n};\n\nexport async function resolveOptionsAsync(projectRoot: string, args: any): Promise<Options> {\n  const forceManifestType = args['--force-manifest-type'];\n  if (forceManifestType) {\n    assert.match(forceManifestType, /^(classic|expo-updates)$/);\n  }\n  const host = resolveHostType({\n    host: args['--host'],\n    offline: args['--offline'],\n    lan: args['--lan'],\n    localhost: args['--localhost'],\n    tunnel: args['--tunnel'],\n  });\n\n  const scheme = await resolveSchemeAsync(projectRoot, {\n    scheme: args['--scheme'],\n    devClient: args['--dev-client'],\n  });\n\n  return {\n    forceManifestType,\n    privateKeyPath: args['private-key-path'] ?? null,\n\n    android: !!args['--android'],\n    web: !!args['--web'],\n    ios: !!args['--ios'],\n    offline: !!args['--offline'],\n\n    clear: !!args['--clear'],\n    dev: !args['--no-dev'],\n    https: !!args['--https'],\n    maxWorkers: args['--max-workers'],\n    port: args['--port'],\n    minify: !!args['--minify'],\n\n    devClient: !!args['--dev-client'],\n\n    scheme,\n    host,\n  };\n}\n\nexport async function resolveSchemeAsync(\n  projectRoot: string,\n  options: { scheme?: string; devClient?: boolean }\n): Promise<string | null> {\n  const resolveFrom = await import('resolve-from').then((m) => m.default);\n\n  const isDevClientPackageInstalled = (() => {\n    try {\n      // we check if `expo-dev-launcher` is installed instead of `expo-dev-client`\n      // because someone could install only launcher.\n      resolveFrom(projectRoot, 'expo-dev-launcher');\n      return true;\n    } catch {\n      return false;\n    }\n  })();\n\n  if (typeof options.scheme === 'string') {\n    // Use the custom scheme\n    return options.scheme ?? null;\n  } else if (options.devClient || isDevClientPackageInstalled) {\n    const { getOptionalDevClientSchemeAsync } = await import('../utils/scheme');\n    // Attempt to find the scheme or warn the user how to setup a custom scheme\n    return await getOptionalDevClientSchemeAsync(projectRoot);\n  } else {\n    // Ensure this is reset when users don't use `--scheme`, `--dev-client` and don't have the `expo-dev-client` package installed.\n    return null;\n  }\n}\n\n/** Resolve and assert host type options. */\nexport function resolveHostType(options: {\n  host?: string;\n  offline?: boolean;\n  lan?: boolean;\n  localhost?: boolean;\n  tunnel?: boolean;\n}): 'lan' | 'tunnel' | 'localhost' {\n  if (\n    [options.offline, options.host, options.lan, options.localhost, options.tunnel].filter((i) => i)\n      .length > 1\n  ) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of: --offline, --host, --tunnel, --lan, --localhost'\n    );\n  }\n\n  if (options.offline) {\n    // Force `lan` in offline mode.\n    return 'lan';\n  } else if (options.host) {\n    assert.match(options.host, /^(lan|tunnel|localhost)$/);\n    return options.host as 'lan' | 'tunnel' | 'localhost';\n  } else if (options.tunnel) {\n    return 'tunnel';\n  } else if (options.lan) {\n    return 'lan';\n  } else if (options.localhost) {\n    return 'localhost';\n  }\n  return 'lan';\n}\n\n/** Resolve the port options for all supported bundlers. */\nexport async function resolvePortsAsync(\n  projectRoot: string,\n  options: Partial<Pick<Options, 'port' | 'devClient'>>,\n  settings: { webOnly?: boolean }\n) {\n  const multiBundlerSettings: { webpackPort?: number; metroPort?: number } = {};\n\n  if (settings.webOnly) {\n    const webpackPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      // Default web port\n      fallbackPort: 19006,\n    });\n    if (!webpackPort) {\n      throw new AbortCommandError();\n    }\n    multiBundlerSettings.webpackPort = webpackPort;\n  } else {\n    const devClientDefaultPort = process.env.RCT_METRO_PORT\n      ? parseInt(process.env.RCT_METRO_PORT, 10)\n      : 8081;\n    const expoGoDefaultPort = 19000;\n    const metroPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      fallbackPort: options.devClient ? devClientDefaultPort : expoGoDefaultPort,\n    });\n    if (!metroPort) {\n      throw new AbortCommandError();\n    }\n    multiBundlerSettings.metroPort = metroPort;\n  }\n\n  return multiBundlerSettings;\n}\n"],"names":["resolveOptionsAsync","resolveSchemeAsync","resolveHostType","resolvePortsAsync","projectRoot","args","forceManifestType","assert","match","host","offline","lan","localhost","tunnel","scheme","devClient","privateKeyPath","android","web","ios","clear","dev","https","maxWorkers","port","minify","options","resolveFrom","then","m","default","isDevClientPackageInstalled","getOptionalDevClientSchemeAsync","filter","i","length","CommandError","settings","multiBundlerSettings","webOnly","webpackPort","resolvePortAsync","defaultPort","fallbackPort","AbortCommandError","devClientDefaultPort","process","env","RCT_METRO_PORT","parseInt","expoGoDefaultPort","metroPort"],"mappings":"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"}