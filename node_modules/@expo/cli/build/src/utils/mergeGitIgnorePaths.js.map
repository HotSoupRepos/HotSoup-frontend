{"version":3,"sources":["../../../src/utils/mergeGitIgnorePaths.ts"],"sourcesContent":["import crypto from 'crypto';\nimport fs from 'fs';\n\ntype MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n/**\n * Merge two gitignore files together and add a generated header.\n *\n * @param targetGitIgnorePath\n * @param sourceGitIgnorePath\n *\n * @returns `null` if one of the gitignore files doesn't exist. Otherwise, returns the merged contents.\n */\nexport function mergeGitIgnorePaths(\n  targetGitIgnorePath: string,\n  sourceGitIgnorePath: string\n): null | MergeResults {\n  if (!fs.existsSync(targetGitIgnorePath)) {\n    // No gitignore in the project already, no need to merge anything into anything. I guess they\n    // are not using git :O\n    return null;\n  }\n\n  if (!fs.existsSync(sourceGitIgnorePath)) {\n    // Maybe we don't have a gitignore in the template project\n    return null;\n  }\n\n  const targetGitIgnore = fs.readFileSync(targetGitIgnorePath).toString();\n  const sourceGitIgnore = fs.readFileSync(sourceGitIgnorePath).toString();\n  const merged = mergeGitIgnoreContents(targetGitIgnore, sourceGitIgnore);\n  // Only rewrite the file if it was modified.\n  if (merged.contents) {\n    fs.writeFileSync(targetGitIgnorePath, merged.contents);\n  }\n\n  return merged;\n}\n\nconst generatedHeaderPrefix = `# @generated expo-cli`;\nexport const generatedFooterComment = `# @end expo-cli`;\n\n/**\n * Get line indexes for the generated section of a gitignore.\n *\n * @param gitIgnore\n */\nfunction getGeneratedSectionIndexes(gitIgnore: string): {\n  contents: string[];\n  start: number;\n  end: number;\n} {\n  const contents = gitIgnore.split('\\n');\n  const start = contents.findIndex((line) => line.startsWith(generatedHeaderPrefix));\n  const end = contents.findIndex((line) => line.startsWith(generatedFooterComment));\n\n  return { contents, start, end };\n}\n\n/**\n * Removes the generated section from a gitignore, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made to the gitignore manually.\n *\n * @param gitIgnore\n */\nexport function removeGeneratedGitIgnoreContents(gitIgnore: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(gitIgnore);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\n/**\n * Merge the contents of two gitignores together and add a generated header.\n *\n * @param targetGitIgnore contents of the existing gitignore\n * @param sourceGitIgnore contents of the extra gitignore\n */\nexport function mergeGitIgnoreContents(\n  targetGitIgnore: string,\n  sourceGitIgnore: string\n): MergeResults {\n  const header = createGeneratedHeaderComment(sourceGitIgnore);\n  if (!targetGitIgnore.includes(header)) {\n    // Ensure the old generated gitignore contents are removed.\n    const sanitizedTarget = removeGeneratedGitIgnoreContents(targetGitIgnore);\n    return {\n      contents: [\n        sanitizedTarget ?? targetGitIgnore,\n        header,\n        `# The following patterns were generated by expo-cli`,\n        ``,\n        sourceGitIgnore,\n        generatedFooterComment,\n      ].join('\\n'),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: targetGitIgnore, didClear: false, didMerge: false };\n}\n\nexport function createGeneratedHeaderComment(gitIgnore: string): string {\n  const hashKey = createGitIgnoreHash(getSanitizedGitIgnoreLines(gitIgnore).join('\\n'));\n\n  return `${generatedHeaderPrefix} ${hashKey}`;\n}\n\n/**\n * Normalize the contents of a gitignore to ensure that minor changes like new lines or sort order don't cause a regeneration.\n */\nexport function getSanitizedGitIgnoreLines(gitIgnore: string): string[] {\n  // filter, trim, and sort the lines.\n  return gitIgnore\n    .split('\\n')\n    .filter((v) => {\n      const line = v.trim();\n      // Strip comments\n      if (line.startsWith('#')) {\n        return false;\n      }\n      return !!line;\n    })\n    .sort();\n}\n\nexport function createGitIgnoreHash(gitIgnore: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(gitIgnore).digest('hex');\n  return `sync-${hash}`;\n}\n"],"names":["mergeGitIgnorePaths","removeGeneratedGitIgnoreContents","mergeGitIgnoreContents","createGeneratedHeaderComment","getSanitizedGitIgnoreLines","createGitIgnoreHash","targetGitIgnorePath","sourceGitIgnorePath","fs","existsSync","targetGitIgnore","readFileSync","toString","sourceGitIgnore","merged","contents","writeFileSync","generatedHeaderPrefix","generatedFooterComment","getGeneratedSectionIndexes","gitIgnore","split","start","findIndex","line","startsWith","end","splice","join","header","includes","sanitizedTarget","didMerge","didClear","hashKey","filter","v","trim","sort","hash","crypto","createHash","update","digest"],"mappings":"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"}