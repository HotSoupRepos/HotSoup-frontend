{"version":3,"sources":["../../../src/utils/port.ts"],"sourcesContent":["import chalk from 'chalk';\nimport freeportAsync from 'freeport-async';\n\nimport * as Log from '../log';\nimport { env } from './env';\nimport { CommandError } from './errors';\n\n/** Get a free port or assert a CLI command error. */\nexport async function getFreePortAsync(rangeStart: number): Promise<number> {\n  const port = await freeportAsync(rangeStart, { hostnames: [null, 'localhost'] });\n  if (!port) {\n    throw new CommandError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\n// TODO(Bacon): Revisit after all start and run code is merged.\nexport async function choosePortAsync(\n  projectRoot: string,\n  {\n    defaultPort,\n    host,\n    reuseExistingPort,\n  }: {\n    defaultPort: number;\n    host?: string;\n    reuseExistingPort?: boolean;\n  }\n): Promise<number | null> {\n  const [{ getRunningProcess }, { confirmAsync }, isRoot, Log] = await Promise.all([\n    import('./getRunningProcess'),\n    import('./prompts'),\n    import('is-root'),\n    import('../log'),\n  ]);\n\n  try {\n    const port = await freeportAsync(defaultPort, { hostnames: [host ?? null] });\n    if (port === defaultPort) {\n      return port;\n    }\n\n    const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !isRoot.default();\n\n    let message = isRestricted\n      ? `Admin permissions are required to run a server on a port below 1024`\n      : `Port ${chalk.bold(defaultPort)} is`;\n\n    const runningProcess = isRestricted ? null : getRunningProcess(defaultPort);\n\n    if (runningProcess) {\n      const pidTag = chalk.gray(`(pid ${runningProcess.pid})`);\n      if (runningProcess.directory === projectRoot) {\n        message += ` running this app in another window`;\n        if (reuseExistingPort) {\n          return null;\n        }\n      } else {\n        message += ` running ${chalk.cyan(runningProcess.command)} in another window`;\n      }\n      message += '\\n' + chalk.gray(`  ${runningProcess.directory} ${pidTag}`);\n    }\n\n    Log.log(`\\u203A ${message}`);\n    const change = await confirmAsync({\n      message: `Use port ${port} instead?`,\n      initial: true,\n    });\n    return change ? port : null;\n  } catch (error: any) {\n    if (error.code === 'ABORTED') {\n      throw error;\n    } else if (error.code === 'NON_INTERACTIVE') {\n      Log.warn(chalk.yellow(error.message));\n      return null;\n    }\n    throw error;\n  }\n}\n\n// TODO(Bacon): Revisit after all start and run code is merged.\nexport async function resolvePortAsync(\n  projectRoot: string,\n  {\n    /** Should opt to reuse a port that is running the same project in another window. */\n    reuseExistingPort,\n    /** Preferred port. */\n    defaultPort,\n    /** Backup port for when the default isn't available. */\n    fallbackPort,\n  }: {\n    reuseExistingPort?: boolean;\n    defaultPort?: string | number;\n    fallbackPort?: number;\n  } = {}\n): Promise<number | null> {\n  let port: number;\n  if (typeof defaultPort === 'string') {\n    port = parseInt(defaultPort, 10);\n  } else if (typeof defaultPort === 'number') {\n    port = defaultPort;\n  } else {\n    port = env.RCT_METRO_PORT || fallbackPort || 8081;\n  }\n\n  // Only check the port when the bundler is running.\n  const resolvedPort = await choosePortAsync(projectRoot, {\n    defaultPort: port,\n    reuseExistingPort,\n  });\n  if (resolvedPort == null) {\n    Log.log('\\u203A Skipping dev server');\n    // Skip bundling if the port is null\n  } else {\n    // Use the new or resolved port\n    process.env.RCT_METRO_PORT = String(resolvedPort);\n  }\n\n  return resolvedPort;\n}\n"],"names":["getFreePortAsync","choosePortAsync","resolvePortAsync","Log","rangeStart","port","freeportAsync","hostnames","CommandError","projectRoot","defaultPort","host","reuseExistingPort","getRunningProcess","confirmAsync","isRoot","Promise","all","isRestricted","process","platform","default","message","chalk","bold","runningProcess","pidTag","gray","pid","directory","cyan","command","log","change","initial","error","code","warn","yellow","fallbackPort","parseInt","env","RCT_METRO_PORT","resolvedPort","String"],"mappings":"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"}