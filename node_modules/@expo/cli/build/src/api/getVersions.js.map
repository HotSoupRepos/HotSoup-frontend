{"version":3,"sources":["../../../src/api/getVersions.ts"],"sourcesContent":["import { env } from '../utils/env';\nimport { CommandError } from '../utils/errors';\nimport { pickBy } from '../utils/obj';\nimport { createCachedFetch } from './rest/client';\n\n/** Represents version info for a particular SDK. */\nexport type SDKVersion = {\n  /** @example \"2.16.1\" */\n  iosVersion?: string;\n  /** @example \"https://dpq5q02fu5f55.cloudfront.net/Exponent-2.17.4.tar.gz\" */\n  iosClientUrl?: string;\n  /** @example \"https://dev.to/expo/expo-sdk-38-is-now-available-5aa0\" */\n  releaseNoteUrl?: string;\n  /** @example \"2.17.4\" */\n  iosClientVersion?: string;\n  /** @example \"https://d1ahtucjixef4r.cloudfront.net/Exponent-2.16.1.apk\" */\n  androidClientUrl?: string;\n  /** @example \"2.16.1\" */\n  androidClientVersion?: string;\n  /** @example { \"typescript\": \"~3.9.5\" } */\n  relatedPackages?: Record<string, string>;\n\n  facebookReactNativeVersion: string;\n\n  facebookReactVersion?: string;\n\n  beta?: boolean;\n};\n\nexport type SDKVersions = Record<string, SDKVersion>;\n\nexport type Versions = {\n  androidUrl: string;\n  androidVersion: string;\n  iosUrl: string;\n  iosVersion: string;\n  sdkVersions: SDKVersions;\n};\n\n/** Get versions from remote endpoint. */\nexport async function getVersionsAsync({\n  skipCache,\n}: { skipCache?: boolean } = {}): Promise<Versions> {\n  // Reconstruct the cached fetch since caching could be disabled.\n  const fetchAsync = createCachedFetch({\n    skipCache,\n    cacheDirectory: 'versions-cache',\n    // We'll use a 1 week cache for versions so older versions get flushed out eventually.\n    ttl: 1000 * 60 * 60 * 24 * 7,\n  });\n\n  const results = await fetchAsync('versions/latest');\n  if (!results.ok) {\n    throw new CommandError(\n      'API',\n      `Unexpected response when fetching version info from Expo servers: ${results.statusText}.`\n    );\n  }\n  const json = await results.json();\n  return json.data;\n}\n\n/** Get the currently released version while also accounting for if the user is running in `EXPO_BETA` mode. */\nexport async function getReleasedVersionsAsync({\n  skipCache,\n}: { skipCache?: boolean } = {}): Promise<SDKVersions> {\n  // NOTE(brentvatne): it is possible for an unreleased version to be published to\n  // the versions endpoint, but in some cases we only want to list out released\n  // versions\n  const { sdkVersions } = await getVersionsAsync({ skipCache });\n  return pickBy(\n    sdkVersions,\n    (data, _sdkVersionString) => !!data.releaseNoteUrl || (env.EXPO_BETA && data.beta)\n  );\n}\n"],"names":["getVersionsAsync","getReleasedVersionsAsync","skipCache","fetchAsync","createCachedFetch","cacheDirectory","ttl","results","ok","CommandError","statusText","json","data","sdkVersions","pickBy","_sdkVersionString","releaseNoteUrl","env","EXPO_BETA","beta"],"mappings":"AAAA;;;;QAwCsBA,gBAAgB,GAAhBA,gBAAgB;QAuBhBC,wBAAwB,GAAxBA,wBAAwB;AA/D1B,IAAA,IAAc,WAAd,cAAc,CAAA;AACL,IAAA,OAAiB,WAAjB,iBAAiB,CAAA;AACvB,IAAA,IAAc,WAAd,cAAc,CAAA;AACH,IAAA,OAAe,WAAf,eAAe,CAAA;AAqC1C,eAAeD,gBAAgB,CAAC,EACrCE,SAAS,CAAA,EACe,GAAG,EAAE,EAAqB;IAClD,gEAAgE;IAChE,MAAMC,UAAU,GAAGC,CAAAA,GAAAA,OAAiB,AAKlC,CAAA,kBALkC,CAAC;QACnCF,SAAS;QACTG,cAAc,EAAE,gBAAgB;QAChC,sFAAsF;QACtFC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;KAC7B,CAAC,AAAC;IAEH,MAAMC,OAAO,GAAG,MAAMJ,UAAU,CAAC,iBAAiB,CAAC,AAAC;IACpD,IAAI,CAACI,OAAO,CAACC,EAAE,EAAE;QACf,MAAM,IAAIC,OAAY,aAAA,CACpB,KAAK,EACL,CAAC,kEAAkE,EAAEF,OAAO,CAACG,UAAU,CAAC,CAAC,CAAC,CAC3F,CAAC;KACH;IACD,MAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACI,IAAI,EAAE,AAAC;IAClC,OAAOA,IAAI,CAACC,IAAI,CAAC;CAClB;AAGM,eAAeX,wBAAwB,CAAC,EAC7CC,SAAS,CAAA,EACe,GAAG,EAAE,EAAwB;IACrD,gFAAgF;IAChF,6EAA6E;IAC7E,WAAW;IACX,MAAM,EAAEW,WAAW,CAAA,EAAE,GAAG,MAAMb,gBAAgB,CAAC;QAAEE,SAAS;KAAE,CAAC,AAAC;IAC9D,OAAOY,CAAAA,GAAAA,IAAM,AAGZ,CAAA,OAHY,CACXD,WAAW,EACX,CAACD,IAAI,EAAEG,iBAAiB,GAAK,CAAC,CAACH,IAAI,CAACI,cAAc,IAAKC,IAAG,IAAA,CAACC,SAAS,IAAIN,IAAI,CAACO,IAAI,AAAC;IAAA,CACnF,CAAC;CACH"}