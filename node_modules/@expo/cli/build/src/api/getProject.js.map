{"version":3,"sources":["../../../src/api/getProject.ts"],"sourcesContent":["import { CommandError } from '../utils/errors';\nimport { fetchAsync } from './rest/client';\nimport { ensureLoggedInAsync } from './user/actions';\n\ninterface Project {\n  accountId: string;\n  createdAt: string;\n  fullName: string;\n  id: string;\n  latestPublishedTime: null | unknown;\n  latestReleaseId: null | unknown;\n  latestRevisionId: null | unknown;\n  originalFullName: string;\n  packageUsername: string;\n  pageViewCount: null | unknown;\n  privacy: string;\n  pushSecurityEnabled: boolean;\n  scopeKey: string;\n  updatedAt: string;\n  viewTrendScore: null | unknown;\n}\n\nexport async function getProjectAsync(projectId: string): Promise<Project> {\n  await ensureLoggedInAsync();\n  const response = await fetchAsync(`projects/${encodeURIComponent(projectId)}`);\n  if (!response.ok) {\n    throw new CommandError('API', `Unexpected error from Expo servers: ${response.statusText}.`);\n  }\n  const { data } = await response.json();\n  return data;\n}\n"],"names":["getProjectAsync","projectId","ensureLoggedInAsync","response","fetchAsync","encodeURIComponent","ok","CommandError","statusText","data","json"],"mappings":"AAAA;;;;QAsBsBA,eAAe,GAAfA,eAAe;AAtBR,IAAA,OAAiB,WAAjB,iBAAiB,CAAA;AACnB,IAAA,OAAe,WAAf,eAAe,CAAA;AACN,IAAA,QAAgB,WAAhB,gBAAgB,CAAA;AAoB7C,eAAeA,eAAe,CAACC,SAAiB,EAAoB;IACzE,MAAMC,CAAAA,GAAAA,QAAmB,AAAE,CAAA,oBAAF,EAAE,CAAC;IAC5B,MAAMC,QAAQ,GAAG,MAAMC,CAAAA,GAAAA,OAAU,AAA6C,CAAA,WAA7C,CAAC,CAAC,SAAS,EAAEC,kBAAkB,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,AAAC;IAC/E,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,OAAY,aAAA,CAAC,KAAK,EAAE,CAAC,oCAAoC,EAAEJ,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9F;IACD,MAAM,EAAEC,IAAI,CAAA,EAAE,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE,AAAC;IACvC,OAAOD,IAAI,CAAC;CACb"}