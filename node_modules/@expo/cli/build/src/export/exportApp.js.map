{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import path from 'path';\n\nimport * as Log from '../log';\nimport { ensureDirectoryAsync } from '../utils/dir';\nimport { createBundlesAsync } from './createBundles';\nimport { exportAssetsAsync } from './exportAssets';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { printBundleSizes } from './printBundleSizes';\nimport { Options } from './resolveOptions';\nimport {\n  writeAssetMapAsync,\n  writeBundlesAsync,\n  writeDebugHtmlAsync,\n  writeMetadataJsonAsync,\n  writeSourceMapsAsync,\n} from './writeContents';\n\n/**\n * The structure of the outputDir will be:\n *\n * ```\n * ├── assets\n * │   └── *\n * ├── bundles\n * │   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n * │   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * └── metadata.json\n * ```\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    dumpSourcemap,\n  }: Pick<Options, 'dumpAssetmap' | 'dumpSourcemap' | 'dev' | 'clear' | 'outputDir' | 'platforms'>\n): Promise<void> {\n  const exp = await getPublicExpoManifestAsync(projectRoot);\n\n  const outputPath = path.resolve(projectRoot, outputDir);\n  const assetsPath = path.join(outputPath, 'assets');\n  const bundlesPath = path.join(outputPath, 'bundles');\n\n  await Promise.all([assetsPath, bundlesPath].map(ensureDirectoryAsync));\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await createBundlesAsync(\n    projectRoot,\n    { resetCache: !!clear },\n    {\n      platforms,\n      dev,\n      useDevServer: true,\n      // TODO: Disable source map generation if we aren't outputting them.\n    }\n  );\n\n  // Log bundle size info to the user\n  printBundleSizes(bundles);\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n  const { hashes, fileNames } = await writeBundlesAsync({ bundles, outputDir: bundlesPath });\n\n  Log.log('Finished saving JS Bundles');\n\n  const { assets } = await exportAssetsAsync(projectRoot, {\n    exp,\n    outputDir: outputPath,\n    bundles,\n  });\n\n  if (dumpAssetmap) {\n    Log.log('Dumping asset map');\n    await writeAssetMapAsync({ outputDir: outputPath, assets });\n  }\n\n  // build source maps\n  if (dumpSourcemap) {\n    Log.log('Dumping source maps');\n    await writeSourceMapsAsync({\n      bundles,\n      hashes,\n      outputDir: bundlesPath,\n      fileNames,\n    });\n\n    Log.log('Preparing additional debugging files');\n    // If we output source maps, then add a debug HTML file which the user can open in\n    // the web browser to inspect the output like web.\n    await writeDebugHtmlAsync({\n      outputDir: outputPath,\n      fileNames,\n    });\n  }\n\n  // Generate a `metadata.json` and the export is complete.\n  await writeMetadataJsonAsync({ outputDir, bundles, fileNames });\n}\n"],"names":["exportAppAsync","Log","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","dumpSourcemap","exp","getPublicExpoManifestAsync","outputPath","path","resolve","assetsPath","join","bundlesPath","Promise","all","map","ensureDirectoryAsync","bundles","createBundlesAsync","resetCache","useDevServer","printBundleSizes","hashes","fileNames","writeBundlesAsync","log","assets","exportAssetsAsync","writeAssetMapAsync","writeSourceMapsAsync","writeDebugHtmlAsync","writeMetadataJsonAsync"],"mappings":"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"}