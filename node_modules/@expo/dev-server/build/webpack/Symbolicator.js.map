{"version":3,"file":"Symbolicator.js","sourceRoot":"","sources":["../../src/webpack/Symbolicator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2021 Callstack, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on https://github.com/callstack/repack/blob/3c1e0597557d09ab64fab0a29a86d3c487a23ef0/packages/repack/src/server/Symbolicator.ts\n */\n\nimport { codeFrameColumns } from '@babel/code-frame';\nimport Log from '@expo/bunyan';\nimport fs from 'fs';\nimport { SourceMapConsumer } from 'source-map';\nimport { URL } from 'url';\n\n/**\n * Raw React Native stack frame.\n */\nexport interface ReactNativeStackFrame {\n  lineNumber: number | null;\n  column: number | null;\n  file: string | null;\n  methodName: string;\n}\n\n/**\n * React Native stack frame used as input when processing by {@link Symbolicator}.\n */\nexport interface InputStackFrame extends ReactNativeStackFrame {\n  file: string;\n}\n\n/**\n * Final symbolicated stack frame.\n */\nexport interface StackFrame extends InputStackFrame {\n  collapse: boolean;\n}\n\n/**\n * Represents [@babel/core-frame](https://babeljs.io/docs/en/babel-code-frame).\n */\nexport interface CodeFrame {\n  content: string;\n  location: {\n    row: number;\n    column: number;\n  };\n  fileName: string;\n}\n\n/**\n * Represents results of running {@link process} method on {@link Symbolicator} instance.\n */\nexport interface SymbolicatorResults {\n  codeFrame: CodeFrame | null;\n  stack: StackFrame[];\n}\n\n/**\n * Class for transforming stack traces from React Native application with using Source Map.\n * Raw stack frames produced by React Native, points to some location from the bundle\n * eg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\n * produces frames that point to source code inside your project eg `Hello.tsx:10:9`.\n */\nexport class Symbolicator {\n  /**\n   * Infer platform from stack frames.\n   * Usually at least one frame has `file` field with the bundle URL eg:\n   * `http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.\n   *\n   * @param stack Array of stack frames.\n   * @returns Inferred platform or `undefined` if cannot infer.\n   */\n  static inferPlatformFromStack(stack: ReactNativeStackFrame[]) {\n    for (const frame of stack) {\n      if (!frame.file) {\n        return null;\n      }\n\n      const { searchParams, pathname } = new URL(frame.file, 'file://');\n      const platform = searchParams.get('platform');\n      if (platform) {\n        return platform;\n      } else {\n        const [bundleFilename] = pathname.split('/').reverse();\n        const [, platformOrExtension, extension] = bundleFilename.split('.');\n        if (extension) {\n          return platformOrExtension;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Cache with initialized `SourceMapConsumer` to improve symbolication performance.\n   */\n  sourceMapConsumerCache: Record<string, SourceMapConsumer> = {};\n\n  constructor(\n    public config: {\n      projectRoot: string;\n      logger: Log;\n      customizeFrame: (frame: StackFrame) => StackFrame;\n      getFileAsync: (props: { url: string; platform: string }) => Promise<string>;\n      getSourceMapAsync: (props: { url: string; platform: string }) => Promise<string>;\n    }\n  ) {}\n\n  /**\n   * Process raw React Native stack frames and transform them using Source Maps.\n   * Method will try to symbolicate as much data as possible, but if the Source Maps\n   * are not available, invalid or the original positions/data is not found in Source Maps,\n   * the method will return raw values - the same as supplied with `stack` parameter.\n   * For example out of 10 frames, it's possible that only first 7 will be symbolicated and the\n   * remaining 3 will be unchanged.\n   *\n   * @param stack Raw stack frames.\n   * @returns Symbolicated stack frames.\n   */\n  async process(\n    stack: ReactNativeStackFrame[],\n    { platform }: { platform: string }\n  ): Promise<SymbolicatorResults> {\n    // TODO: add debug logging\n    const frames: InputStackFrame[] = [];\n    for (const frame of stack) {\n      const { file } = frame;\n\n      if (file?.startsWith('http') && !file.includes('debuggerWorker')) {\n        frames.push(frame as InputStackFrame);\n      }\n    }\n\n    try {\n      const processedFrames: StackFrame[] = [];\n      for (const frame of frames) {\n        if (!this.sourceMapConsumerCache[frame.file]) {\n          const rawSourceMap = await this.config.getSourceMapAsync({\n            url: frame.file,\n            platform,\n          });\n          const sourceMapConsumer = await new SourceMapConsumer(rawSourceMap as any);\n          this.sourceMapConsumerCache[frame.file] = sourceMapConsumer;\n        }\n        const processedFrame = this.config.customizeFrame(this.processFrame(frame));\n\n        processedFrames.push(processedFrame);\n      }\n\n      const codeFrame = await this.getCodeFrame(processedFrames, platform);\n      return {\n        stack: processedFrames,\n        codeFrame: codeFrame ?? null,\n      };\n    } finally {\n      for (const key in this.sourceMapConsumerCache) {\n        delete this.sourceMapConsumerCache[key];\n      }\n    }\n  }\n\n  private processFrame(frame: InputStackFrame): StackFrame {\n    if (!frame.lineNumber || !frame.column) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const consumer = this.sourceMapConsumerCache[frame.file];\n    if (!consumer) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const lookup = consumer.originalPositionFor({\n      line: frame.lineNumber,\n      column: frame.column,\n    });\n\n    // If lookup fails, we get the same shape object, but with\n    // all values set to null\n    if (!lookup.source) {\n      // It is better to gracefully return the original frame\n      // than to throw an exception\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    return {\n      lineNumber: lookup.line || frame.lineNumber,\n      column: lookup.column || frame.column,\n      file: lookup.source,\n      methodName: lookup.name || frame.methodName,\n      collapse: false,\n    };\n  }\n\n  private async getCodeFrame(\n    processedFrames: StackFrame[],\n    platform: string\n  ): Promise<CodeFrame | undefined> {\n    for (const frame of processedFrames) {\n      if (frame.collapse || !frame.lineNumber || !frame.column) {\n        continue;\n      }\n\n      try {\n        let filename;\n        let source;\n\n        if (frame.file.startsWith('http') && frame.file.includes('index.bundle')) {\n          // Frame points to the bundle so we need to read bundle from WDM's FS.\n          filename = frame.file;\n          source = await this.config.getFileAsync({ url: '/index.bundle', platform });\n        } else {\n          filename = frame.file.replace('webpack://', '');\n          source = await fs.promises.readFile(filename, 'utf8');\n        }\n\n        return {\n          content: codeFrameColumns(\n            source,\n            {\n              start: { column: frame.column, line: frame.lineNumber },\n            },\n            { forceColor: true }\n          ),\n          location: {\n            row: frame.lineNumber,\n            column: frame.column,\n          },\n          fileName: filename,\n        };\n      } catch (error: any) {\n        this.config.logger.error(\n          { tag: 'dev-server' },\n          'Symbolication failed to create code preview: ' + error.message\n        );\n      }\n    }\n    return undefined;\n  }\n}\n"]}