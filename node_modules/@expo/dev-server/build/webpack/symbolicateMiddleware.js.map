{"version":3,"file":"symbolicateMiddleware.js","sourceRoot":"","sources":["../../src/webpack/symbolicateMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import Log from '@expo/bunyan';\nimport { INTERNAL_CALLSITES_REGEX } from '@expo/metro-config';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport path from 'path';\n\nimport { ReactNativeStackFrame, StackFrame, Symbolicator } from './Symbolicator';\nimport {\n  AnyCompiler,\n  createGetFileNameFromUrl,\n  getFileFromCompilerAsync,\n  getPlatformFromRequest,\n} from './getFileAsync';\n\n// Customize the stack frames like we do in Metro projects.\nfunction customizeFrame(frame: StackFrame) {\n  let collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n\n  if (!collapse) {\n    // This represents the first frame of the stacktrace.\n    // Often this looks like: `__r(0);`.\n    // The URL will also be unactionable in the app and therefore not very useful to the developer.\n    if (\n      frame.column === 3 &&\n      frame.methodName === 'global code' &&\n      frame.file?.match(/^https?:\\/\\//g)\n    ) {\n      collapse = true;\n    }\n  }\n\n  return { ...(frame || {}), collapse };\n}\n\nexport function createSymbolicateMiddleware({\n  projectRoot,\n  logger,\n  compiler,\n}: {\n  projectRoot: string;\n  logger: Log;\n  compiler: AnyCompiler;\n}) {\n  const getFilenameFromUrl = createGetFileNameFromUrl(compiler);\n\n  const symbolicate = new Symbolicator({\n    projectRoot,\n    logger,\n    customizeFrame,\n    async getFileAsync(props) {\n      const fileName = getFilenameFromUrl(props);\n      return getFileFromCompilerAsync(compiler, { fileName, platform: props.platform });\n    },\n    async getSourceMapAsync(props) {\n      const fileName = getFilenameFromUrl(props);\n      const fallbackSourceMapFilename = `${fileName}.map`;\n      const bundle = await getFileFromCompilerAsync(compiler, {\n        fileName,\n        platform: props.platform,\n      });\n      const sourceMappingUrl = /sourceMappingURL=(.+)$/.exec(bundle)?.[1];\n      const sourceMapBasename = sourceMappingUrl?.split('?')?.[0];\n\n      let sourceMapFilename = fallbackSourceMapFilename;\n      if (sourceMapBasename) {\n        sourceMapFilename = path.join(path.dirname(fileName), sourceMapBasename);\n      }\n\n      let parseError: Error | null = null;\n      for (const file of [sourceMapFilename, fallbackSourceMapFilename]) {\n        try {\n          return await getFileFromCompilerAsync(compiler, {\n            fileName: file,\n            platform: props.platform,\n          });\n        } catch (error: any) {\n          parseError = error;\n          console.warn('Failed to read source map from sourceMappingURL:', file);\n          // logger.warn({ tag: 'dev-server' }, 'Failed to read source map from sourceMappingURL');\n        }\n      }\n      throw parseError;\n    },\n  });\n\n  return async function (\n    req: IncomingMessage & { body?: any; rawBody?: any },\n    res: ServerResponse\n  ) {\n    try {\n      if (!req.rawBody) {\n        return res.writeHead(400).end('Missing request rawBody.');\n      }\n\n      const { stack } = JSON.parse(req.rawBody as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n\n      const platform =\n        getPlatformFromRequest(req) ?? Symbolicator.inferPlatformFromStack(stack) ?? 'web';\n\n      if (!platform) {\n        return res\n          .writeHead(400)\n          .end(\n            'Missing expo-platform header, platform query parameter, or platform parameter in source map comment url'\n          );\n      }\n\n      const parsed = await symbolicate.process(stack, { platform });\n      return res.end(JSON.stringify(parsed));\n    } catch (error: any) {\n      console.error(`Failed to symbolicate: ${error} ${error.stack}`);\n      // logger.error({ tag: 'dev-server' }, `Failed to symbolicate: ${error} ${error.stack}`);\n      res.statusCode = 500;\n      return res.end(JSON.stringify({ error: error.message }));\n    }\n  };\n}\n"]}