{"version":3,"file":"getFileAsync.js","sourceRoot":"","sources":["../../src/webpack/getFileAsync.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAG5B,aAAa;AACb,0DAAqE;AAIrE;;;;;;GAMG;AACH,SAAgB,wBAAwB,CACtC,QAAqB,EACrB,EAAE,QAAQ,EAAE,QAAQ,EAA2C;IAE/D,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACpE,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC5C,gBAAgB,CAAC,gBAAwB,CAAC,QAAQ,CACjD,QAAQ,EACR,CAAC,KAAwB,EAAE,OAAwB,EAAE,EAAE;QACrD,IAAI,KAAK,IAAI,CAAC,OAAO,EAAE;YACrB,MAAM,CAAC,KAAK,CAAC,CAAC;SACf;aAAM;YACL,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7B;IACH,CAAC,CACF,CACF,CAAC;AACJ,CAAC;AAjBD,4DAiBC;AAED,SAAgB,sBAAsB,CAAC,OAAwB;;IAC7D,mDAAmD;IACnD,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,QAAQ,EAAE;QACxD,OAAO,MAAA,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,mCAAI,IAAI,CAAC;KACjD;IAED,kDAAkD;IAClD,OAAO,MAAA,MAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,0CAAE,KAAK,mDAAG,2BAA2B,CAAC,0CAAG,CAAC,CAAC,mCAAI,IAAI,CAAC;AACzE,CAAC;AARD,wDAQC;AAED;;;;;;;;;GASG;AACH,SAAgB,sBAAsB,CAAC,QAAqB,EAAE,QAAiB;IAC7E,IAAI,CAAC,CAAC,WAAW,IAAI,QAAQ,CAAC,EAAE;QAC9B,OAAO,QAAQ,CAAC;KACjB;IACD,IAAA,gBAAM,EAAC,QAAQ,EAAE,sDAAsD,CAAC,CAAC;IACzE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IAC7F,IAAA,gBAAM,EAAC,gBAAgB,EAAE,iDAAiD,QAAQ,EAAE,CAAC,CAAC;IACtF,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AARD,wDAQC;AAED,SAAgB,wBAAwB,CAAC,QAAqB,EAAE,aAAqB,GAAG;IACtF,OAAO,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAsC;QACpE,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEpE,MAAM,QAAQ,GAAG,IAAA,yBAAkB;QACjC,cAAc;QACd,UAAU,EACV,gBAAgB,EAChB,GAAG,CACJ,CAAC;QACF,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,0CAA0C,GAAG,EAAE,CAAC,CAAC;SAClE;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC;AAfD,4DAeC","sourcesContent":["import assert from 'assert';\nimport type { IncomingMessage } from 'http';\nimport webpack from 'webpack';\n// @ts-ignore\nimport { getFilenameFromUrl } from 'webpack-dev-middleware/lib/util';\n\nexport type AnyCompiler = webpack.Compiler | webpack.MultiCompiler;\n\n/**\n * Read a file from the webpack \"compiler\".\n *\n * @param compiler webpack compiler\n * @param filename Like: `/Users/evanbacon/Documents/GitHub/lab/yolo47/web-build/index.bundle`\n * @returns\n */\nexport function getFileFromCompilerAsync(\n  compiler: AnyCompiler,\n  { fileName, platform }: { fileName: string; platform?: string }\n): Promise<string> {\n  const platformCompiler = getCompilerForPlatform(compiler, platform);\n  return new Promise<string>((resolve, reject) =>\n    (platformCompiler.outputFileSystem as any).readFile(\n      fileName,\n      (error: Error | undefined, content: string | Buffer) => {\n        if (error || !content) {\n          reject(error);\n        } else {\n          resolve(content.toString());\n        }\n      }\n    )\n  );\n}\n\nexport function getPlatformFromRequest(request: IncomingMessage): string | null {\n  // Use the expo updates spec to check the platform.\n  if (typeof request.headers['expo-platform'] === 'string') {\n    return request.headers['expo-platform'] ?? null;\n  }\n\n  // Get the platform from the query params cheaply.\n  return request?.url?.match?.(/[?|&]platform=(\\w+)[&|\\\\]/)?.[1] ?? null;\n}\n\n/**\n * Get the Webpack compiler for a given platform.\n * In Expo we distinguish platforms by using the `name` property of the Webpack config.\n *\n * When the platform is undefined, or the compiler cannot be identified, we assert.\n *\n * @param compiler\n * @param platform\n * @returns\n */\nexport function getCompilerForPlatform(compiler: AnyCompiler, platform?: string): webpack.Compiler {\n  if (!('compilers' in compiler)) {\n    return compiler;\n  }\n  assert(platform, 'platform must be provided for multi-compiler servers');\n  const platformCompiler = compiler.compilers.find(({ options }) => options.name === platform);\n  assert(platformCompiler, `Could not find Webpack compiler for platform: ${platform}`);\n  return platformCompiler;\n}\n\nexport function createGetFileNameFromUrl(compiler: AnyCompiler, publicPath: string = '/') {\n  return function ({ url, platform }: { url: string; platform?: string }): string {\n    const platformCompiler = getCompilerForPlatform(compiler, platform);\n\n    const filename = getFilenameFromUrl(\n      // public path\n      publicPath,\n      platformCompiler,\n      url\n    );\n    if (!filename) {\n      throw new Error(`Cannot get Webpack file name from url: ${url}`);\n    }\n    return filename;\n  };\n}\n"]}