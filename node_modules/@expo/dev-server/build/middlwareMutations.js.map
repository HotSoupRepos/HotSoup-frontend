{"version":3,"file":"middlwareMutations.js","sourceRoot":"","sources":["../src/middlwareMutations.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,GAAkB,EAAE,UAA0B;IAC9E,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAG,CAAC,CAAC;AACtC,CAAC;AAHD,8CAGC;AAED;;;;;;GAMG;AACH,SAAgB,qBAAqB,CACnC,GAAkB,EAClB,gBAAgC,EAChC,gBAAgC;IAEhC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,gBAAgB,CAAC,CAAC;IAClF,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC;KAChC;AACH,CAAC;AATD,sDASC","sourcesContent":["import type { Server as ConnectServer, HandleFunction } from 'connect';\n\n/**\n * Prepends a `middleware` to current server middleware stack.\n *\n * @param app connect app server instance\n * @param middleware target middleware to be prepended\n */\nexport function prependMiddleware(app: ConnectServer, middleware: HandleFunction) {\n  app.use(middleware);\n  app.stack.unshift(app.stack.pop()!);\n}\n\n/**\n * Replaces source middleware with a new middlware in connect app\n *\n * @param app connect app server instance\n * @param sourceMiddleware source middlware to be matched and replaces\n * @param targetMiddleware new middlware\n */\nexport function replaceMiddlewareWith(\n  app: ConnectServer,\n  sourceMiddleware: HandleFunction,\n  targetMiddleware: HandleFunction\n) {\n  const item = app.stack.find(middleware => middleware.handle === sourceMiddleware);\n  if (item) {\n    item.handle = targetMiddleware;\n  }\n}\n"]}