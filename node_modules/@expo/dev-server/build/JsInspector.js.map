{"version":3,"file":"JsInspector.js","sourceRoot":"","sources":["../src/JsInspector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as osascript from '@expo/osascript';\nimport { ChildProcess, spawn } from 'child_process';\nimport { sync as globSync } from 'glob';\nimport fetch from 'node-fetch';\nimport open from 'open';\nimport os from 'os';\nimport path from 'path';\n\nexport interface MetroInspectorProxyApp {\n  description: string;\n  devtoolsFrontendUrl: string;\n  faviconUrl: string;\n  id: string;\n  title: string;\n  type: 'node';\n  vm: 'Hermes' | \"don't use\";\n  webSocketDebuggerUrl: string;\n}\n\nlet openingChildProcess: ChildProcess | null = null;\n\nexport function openJsInspector(app: MetroInspectorProxyApp) {\n  // To update devtoolsFrontendRev, find the full commit hash in the url:\n  // https://chromium.googlesource.com/chromium/src.git/+log/refs/tags/{CHROME_VERSION}/chrome/VERSION\n  //\n  // 1. Replace {CHROME_VERSION} with the target chrome version\n  // 2. Click the first log item in the webpage\n  // 3. The full commit hash is the desired revision\n  const devtoolsFrontendRev = 'e3cd97fc771b893b7fd1879196d1215b622c2bed'; // Chrome 90.0.4430.212\n\n  const urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/inspector.html`;\n  const ws = app.webSocketDebuggerUrl.replace(/^ws:\\/\\//, '');\n  const url = `${urlBase}?panel=sources&v8only=true&ws=${encodeURIComponent(ws)}`;\n  launchChromiumAsync(url);\n}\n\nexport function closeJsInspector() {\n  if (openingChildProcess != null) {\n    openingChildProcess.kill();\n    openingChildProcess = null;\n  }\n}\n\nexport async function queryInspectorAppAsync(\n  metroServerOrigin: string,\n  appId: string\n): Promise<MetroInspectorProxyApp | null> {\n  const apps = await queryAllInspectorAppsAsync(metroServerOrigin);\n  return apps.find(app => app.description === appId) ?? null;\n}\n\nexport async function queryAllInspectorAppsAsync(\n  metroServerOrigin: string\n): Promise<MetroInspectorProxyApp[]> {\n  const resp = await fetch(`${metroServerOrigin}/json/list`);\n  const apps: MetroInspectorProxyApp[] = transformApps(await resp.json());\n  // Only use targets with better reloading support\n  return apps.filter(app => app.title === 'React Native Experimental (Improved Chrome Reloads)');\n}\n\n// The description of `React Native Experimental (Improved Chrome Reloads)` target is `don't use` from metro.\n// This function tries to transform the unmeaningful description to appId\nfunction transformApps(apps: MetroInspectorProxyApp[]): MetroInspectorProxyApp[] {\n  const deviceIdToAppId: Record<string, string> = {};\n\n  for (const app of apps) {\n    if (app.description !== \"don't use\") {\n      const deviceId = app.id.split('-')[0];\n      const appId = app.description;\n      deviceIdToAppId[deviceId] = appId;\n    }\n  }\n\n  return apps.map(app => {\n    if (app.description === \"don't use\") {\n      const deviceId = app.id.split('-')[0];\n      app.description = deviceIdToAppId[deviceId] ?? app.description;\n    }\n    return app;\n  });\n}\n\nasync function launchChromiumAsync(url: string): Promise<void> {\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const tmpDir = require('temp-dir');\n  const tempProfileDir = path.join(tmpDir, 'expo-inspector');\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempProfileDir}`,\n    '--no-first-run',\n    '--no-startup-window',\n    '--no-default-browser-check',\n  ];\n\n  const supportedChromiums = [open.apps.chrome, open.apps.edge];\n  for (const chromium of supportedChromiums) {\n    try {\n      await launchAppAsync(chromium, launchArgs);\n      return;\n    } catch {}\n  }\n\n  throw new Error(\n    'Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nasync function launchAppAsync(\n  appName: string | readonly string[],\n  launchArgs: string[]\n): Promise<void> {\n  if (os.platform() === 'darwin' && !Array.isArray(appName)) {\n    const appDirectory = await osascript.execAsync(\n      `POSIX path of (path to application \"${appName}\")`\n    );\n    const appPath = globSync('Contents/MacOS/*', { cwd: appDirectory.trim(), absolute: true })?.[0];\n    if (!appPath) {\n      throw new Error(`Cannot find application path from ${appDirectory}Contents/MacOS`);\n    }\n    closeJsInspector();\n    openingChildProcess = spawn(appPath, launchArgs, { stdio: 'ignore' });\n    return;\n  }\n\n  const result = await open.openApp(appName, {\n    arguments: launchArgs,\n    newInstance: true,\n    wait: true,\n  });\n  if (result.exitCode !== 0) {\n    throw new Error(`Cannot find application: ${appName}`);\n  }\n}\n"]}