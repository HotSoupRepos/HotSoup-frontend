{"version":3,"file":"devServerMiddleware.js","sourceRoot":"","sources":["../../src/middleware/devServerMiddleware.ts"],"names":[],"mappings":";;;;;;AACA,8DAAqC;AAGrC,4EAAgF;AAChF,8DAAiF;AACjF,kFAA0D;AAC1D,gGAAwE;AACxE,iFAA8E;AAC9E,uGAAoG;AACpG,uEAAmF;AAEnF;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,yBAAyB,CACvC,WAAmB,EACnB,EACE,YAAY,EACZ,IAAI,EACJ,MAAM,GAKP;IAED,MAAM,EAAE,yBAAyB,EAAE,yBAAyB,EAAE,GAAG,IAAA,sDAA6B,EAC5F,WAAW,CACZ,CAAC;IACF,MAAM,EACJ,UAAU;IACV,4BAA4B;IAC5B,cAAc;IAEd,MAAM;IACN,qBAAqB,EACrB,qBAAqB,EACrB,oBAAoB,EACpB,kBAAkB,GACnB,GAAG,yBAAyB,CAAC;QAC5B,IAAI;QACJ,YAAY;KACb,CAAC,CAAC;IAEH,6GAA6G;IAC7G,wCAAwC;IACxC,IAAA,0CAAqB,EACnB,UAA2B,EAC3B,yBAAyB,EACzB,iFAAuC,CACxC,CAAC;IACF,UAAU,CAAC,GAAG,CAAC,2DAA4B,CAAC,CAAC;IAC7C,IAAA,sCAAiB,EAAC,UAAU,EAAE,gEAAsC,CAAC,CAAC;IAEtE,UAAU,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,IAAA,8BAAoB,EAAC,MAAM,CAAC,CAAC,CAAC;IACtD,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,IAAA,qCAA2B,GAAE,CAAC,CAAC;IAE5D,OAAO;QACL,MAAM;QACN,UAAU;QACV,MAAM;QACN,cAAc;QACd,MAAM;QACN,qBAAqB;QACrB,qBAAqB;QACrB,oBAAoB;QACpB,kBAAkB;KACnB,CAAC;AACJ,CAAC;AAvDD,8DAuDC","sourcesContent":["import Log from '@expo/bunyan';\nimport bodyParser from 'body-parser';\nimport { Server as ConnectServer } from 'connect';\n\nimport { importCliServerApiFromProject } from '../metro/importMetroFromProject';\nimport { prependMiddleware, replaceMiddlewareWith } from '../middlwareMutations';\nimport clientLogsMiddleware from './clientLogsMiddleware';\nimport createJsInspectorMiddleware from './createJsInspectorMiddleware';\nimport { remoteDevtoolsCorsMiddleware } from './remoteDevtoolsCorsMiddleware';\nimport { remoteDevtoolsSecurityHeadersMiddleware } from './remoteDevtoolsSecurityHeadersMiddleware';\nimport { suppressRemoteDebuggingErrorMiddleware } from './suppressErrorMiddleware';\n\n/**\n * Extends the default `createDevServerMiddleware` and adds some Expo CLI-specific dev middleware\n * with exception for the manifest middleware which is currently in `xdl`.\n *\n * Adds:\n * - `/logs`: pipe runtime `console` logs to the `props.logger` object.\n * - `/inspector`: launch hermes inspector proxy in chrome.\n * - CORS support for remote devtools\n * - body parser middleware\n *\n * @param props.watchFolders array of directory paths to use with watchman\n * @param props.port port that the dev server will run on\n * @param props.logger bunyan instance that all runtime `console` logs will be piped through.\n *\n * @returns\n */\nexport function createDevServerMiddleware(\n  projectRoot: string,\n  {\n    watchFolders,\n    port,\n    logger,\n  }: {\n    watchFolders: readonly string[];\n    port: number;\n    logger: Log;\n  }\n) {\n  const { createDevServerMiddleware, securityHeadersMiddleware } = importCliServerApiFromProject(\n    projectRoot\n  );\n  const {\n    middleware,\n    // @ts-expect-error: Old API\n    attachToServer,\n\n    // New\n    debuggerProxyEndpoint,\n    messageSocketEndpoint,\n    eventsSocketEndpoint,\n    websocketEndpoints,\n  } = createDevServerMiddleware({\n    port,\n    watchFolders,\n  });\n\n  // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.\n  // We replace with the enhanced version.\n  replaceMiddlewareWith(\n    middleware as ConnectServer,\n    securityHeadersMiddleware,\n    remoteDevtoolsSecurityHeadersMiddleware\n  );\n  middleware.use(remoteDevtoolsCorsMiddleware);\n  prependMiddleware(middleware, suppressRemoteDebuggingErrorMiddleware);\n\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(logger));\n  middleware.use('/inspector', createJsInspectorMiddleware());\n\n  return {\n    logger,\n    middleware,\n    // Old\n    attachToServer,\n    // New\n    debuggerProxyEndpoint,\n    messageSocketEndpoint,\n    eventsSocketEndpoint,\n    websocketEndpoints,\n  };\n}\n"]}