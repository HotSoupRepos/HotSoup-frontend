{"version":3,"file":"clientLogsMiddleware.js","sourceRoot":"","sources":["../../src/middleware/clientLogsMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import Log from '@expo/bunyan';\nimport chalk from 'chalk';\nimport { HandleFunction } from 'connect';\nimport http from 'http';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nexport default function clientLogsMiddleware(logger: Log): HandleFunction {\n  return function (\n    req: http.IncomingMessage & { body?: any },\n    res: http.ServerResponse,\n    next: (err?: Error) => void\n  ) {\n    try {\n      const deviceId = req.headers['device-id'];\n      const deviceName = req.headers['device-name'];\n      const expoPlatform = req.headers['expo-platform'];\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform?.toString(),\n      });\n    } catch (error: any) {\n      logger.error({ tag: 'expo' }, `Error getting device logs: ${error} ${error.stack}`);\n      next(error);\n    }\n    res.end('Success');\n  };\n}\n\nfunction isIgnorableBugReportingExtraData(body: any[]): boolean {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction isAppRegistryStartupMessage(body: any[]): boolean {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nexport function getDevicePlatformFromAppRegistryStartupMessage(body: string[]): string | null {\n  if (body.length === 1 && typeof body[0] === 'string') {\n    // Dangerously pick the platform out of the request URL\n    // like: http:\\\\\\\\/\\\\\\\\/192.168.6.113:19000\\\\\\\\/index.bundle&platform=android\\dev=true&hot=false&minify=false\n    return body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)?.[1] ?? null;\n  }\n  return null;\n}\n\nfunction formatDevicePlatform(platform: string): string {\n  // Map the ID like \"ios\" to \"iOS\"\n  const formatted = { ios: 'iOS', android: 'Android', web: 'Web' }[platform] || platform;\n  return `${chalk.bold(formatted)} `;\n}\n\nfunction handleDeviceLogs(\n  logger: Log,\n  {\n    deviceId,\n    deviceName,\n    logs,\n    devicePlatform,\n  }: { deviceId: string; deviceName: string; devicePlatform?: string; logs: any }\n): void {\n  for (const log of logs) {\n    let body = Array.isArray(log.body) ? log.body : [log.body];\n    let { level } = log;\n\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (isAppRegistryStartupMessage(body)) {\n      // If the installed version of expo is sending back the `device-platform` header\n      // then use that, otherwise find it in the query string.\n      const platformId = devicePlatform\n        ? devicePlatform\n        : getDevicePlatformFromAppRegistryStartupMessage(body);\n\n      const platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [`${platform}Running app on ${deviceName}`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    logger[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n"]}