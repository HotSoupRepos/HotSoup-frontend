{"version":3,"file":"createJsInspectorMiddleware.js","sourceRoot":"","sources":["../../src/middleware/createJsInspectorMiddleware.ts"],"names":[],"mappings":";;;;;AAEA,8CAAsB;AACtB,6BAAgC;AAChC,6BAA0B;AAE1B,gDAAyE;AAEzE,SAAwB,2BAA2B;IACjD,OAAO,KAAK,WAAW,GAAoB,EAAE,GAAmB,EAAE,IAA2B;;QAC3F,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,SAAG,CAAC,MAAA,GAAG,CAAC,GAAG,mCAAI,GAAG,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7E,MAAM,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,EAAE;YAClB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YAChD,OAAO;SACR;QAED,MAAM,GAAG,GAAG,MAAM,IAAA,oCAAsB,EAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,EAAE;YACR,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;YACrF,OAAO;SACR;QAED,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE;YACxB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACjC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;gBACjB,cAAc,EAAE,iCAAiC;gBACjD,eAAe,EAAE,UAAU;gBAC3B,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;aACzC,CAAC,CAAC;YACH,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACf;aAAM,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE;YACxD,IAAA,6BAAe,EAAC,GAAG,CAAC,CAAC;YACrB,GAAG,CAAC,GAAG,EAAE,CAAC;SACX;aAAM;YACL,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SACpB;IACH,CAAC,CAAC;AACJ,CAAC;AA9BD,8CA8BC;AAED,SAAS,aAAa,CAAC,GAAoB;IACzC,MAAM,MAAM,GACV,GAAG,CAAC,MAAM,YAAY,eAAS,IAAI,GAAG,CAAC,MAAM,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;IACtF,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAC/C,MAAM,OAAO,GAAG,aAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC;IAC9E,OAAO,GAAG,MAAM,IAAI,OAAO,IAAI,SAAS,EAAE,CAAC;AAC7C,CAAC","sourcesContent":["import type { NextHandleFunction } from 'connect';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport net from 'net';\nimport { TLSSocket } from 'tls';\nimport { URL } from 'url';\n\nimport { openJsInspector, queryInspectorAppAsync } from '../JsInspector';\n\nexport default function createJsInspectorMiddleware(): NextHandleFunction {\n  return async function (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) {\n    const { origin, searchParams } = new URL(req.url ?? '/', getServerBase(req));\n    const applicationId = searchParams.get('applicationId');\n    if (!applicationId) {\n      res.writeHead(400).end('Missing applicationId');\n      return;\n    }\n\n    const app = await queryInspectorAppAsync(origin, applicationId);\n    if (!app) {\n      res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n      return;\n    }\n\n    if (req.method === 'GET') {\n      const data = JSON.stringify(app);\n      res.writeHead(200, {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Cache-Control': 'no-cache',\n        'Content-Length': data.length.toString(),\n      });\n      res.end(data);\n    } else if (req.method === 'POST' || req.method === 'PUT') {\n      openJsInspector(app);\n      res.end();\n    } else {\n      res.writeHead(405);\n    }\n  };\n}\n\nfunction getServerBase(req: IncomingMessage): string {\n  const scheme =\n    req.socket instanceof TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  const { localAddress, localPort } = req.socket;\n  const address = net.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}\n"]}