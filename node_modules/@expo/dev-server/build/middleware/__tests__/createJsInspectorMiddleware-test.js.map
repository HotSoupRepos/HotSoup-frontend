{"version":3,"file":"createJsInspectorMiddleware-test.js","sourceRoot":"","sources":["../../../src/middleware/__tests__/createJsInspectorMiddleware-test.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http';\nimport type { Socket } from 'net';\nimport { URL } from 'url';\n\nimport * as JsInspector from '../../JsInspector';\nimport { METRO_INSPECTOR_RESPONSE_FIXTURE } from '../../__tests__/fixtures/metroInspectorResponse';\nimport createJsInspectorMiddleware from '../createJsInspectorMiddleware';\n\njest.mock('../../JsInspector');\n\ndescribe('createJsInspectorMiddleware', () => {\n  it('should return specific app entity for GET request with given applicationId', async () => {\n    const app = METRO_INSPECTOR_RESPONSE_FIXTURE[0];\n    const req = createRequest(`http://localhost:8081/inspector?applicationId=${app.description}`);\n    const res = createMockedResponse();\n    const next = jest.fn();\n    (JsInspector.queryInspectorAppAsync as jest.MockedFunction<\n      typeof JsInspector.queryInspectorAppAsync\n    >).mockReturnValue(Promise.resolve(app));\n\n    const middlewareAsync = createJsInspectorMiddleware();\n    await middlewareAsync(req, res as ServerResponse, next);\n\n    expectMockedResponse(res, 200, JSON.stringify(app));\n  });\n\n  it('should handle ipv6 address', async () => {\n    const app = METRO_INSPECTOR_RESPONSE_FIXTURE[0];\n    const req = createRequest(\n      `http://[::ffff:127.0.0.1]/inspector?applicationId=${app.description}`\n    );\n    const res = createMockedResponse();\n    const next = jest.fn();\n    (JsInspector.queryInspectorAppAsync as jest.MockedFunction<\n      typeof JsInspector.queryInspectorAppAsync\n    >).mockReturnValue(Promise.resolve(app));\n\n    const middlewareAsync = createJsInspectorMiddleware();\n    await middlewareAsync(req, res as ServerResponse, next);\n\n    expectMockedResponse(res, 200, JSON.stringify(app));\n  });\n\n  it('should return 404 for GET request with nonexistent applicationId', async () => {\n    const req = createRequest('http://localhost:8081/inspector?applicationId=nonExistentApp');\n    const res = createMockedResponse();\n    const next = jest.fn();\n    (JsInspector.queryInspectorAppAsync as jest.MockedFunction<\n      typeof JsInspector.queryInspectorAppAsync\n    >).mockReturnValue(Promise.resolve(null));\n\n    const middlewareAsync = createJsInspectorMiddleware();\n    await middlewareAsync(req, res as ServerResponse, next);\n\n    expectMockedResponse(res, 404);\n  });\n\n  it('should return 400 for GET request without parameters', async () => {\n    const req = createRequest('http://localhost:8081/inspector');\n    const res = createMockedResponse();\n    const next = jest.fn();\n\n    const middlewareAsync = createJsInspectorMiddleware();\n    await middlewareAsync(req, res as ServerResponse, next);\n\n    expectMockedResponse(res, 400);\n  });\n\n  it('should open browser for PUT request with given applicationId', async () => {\n    const app = METRO_INSPECTOR_RESPONSE_FIXTURE[0];\n    const req = createRequest(\n      `http://localhost:8081/inspector?applicationId=${app.description}`,\n      'PUT'\n    );\n    const res = createMockedResponse();\n    const next = jest.fn();\n    (JsInspector.queryInspectorAppAsync as jest.MockedFunction<\n      typeof JsInspector.queryInspectorAppAsync\n    >).mockReturnValue(Promise.resolve(app));\n\n    const middlewareAsync = createJsInspectorMiddleware();\n    await middlewareAsync(req, res as ServerResponse, next);\n\n    expectMockedResponse(res, 200);\n    expect(JsInspector.openJsInspector).toHaveBeenCalledTimes(1);\n  });\n});\n\nfunction createRequest(requestUrl: string, method?: 'GET' | 'POST' | 'PUT'): IncomingMessage {\n  const url = new URL(requestUrl);\n  const req: Partial<IncomingMessage> = {\n    method: method || 'GET',\n    headers: {\n      host: url.host,\n    },\n    socket: {\n      localAddress: url.hostname,\n      localPort: Number(url.port || 80),\n    } as Socket,\n    url: `${url.pathname}${url.search}`,\n  };\n  return req as IncomingMessage;\n}\n\ninterface MockedResponse extends Partial<ServerResponse> {\n  end: jest.Mock;\n  writeHead: jest.Mock;\n  write: jest.Mock;\n}\n\nfunction createMockedResponse(): MockedResponse {\n  return {\n    end: jest.fn(),\n    writeHead: jest.fn().mockReturnThis(),\n    write: jest.fn().mockReturnThis(),\n  };\n}\n\nfunction expectMockedResponse(res: MockedResponse, status: number, body?: string) {\n  if (status !== 200) {\n    expect(res.writeHead.mock.calls[0][0]).toBe(status);\n  }\n  if (body) {\n    expect(res.end.mock.calls[0][0]).toBe(body);\n  }\n}\n"]}