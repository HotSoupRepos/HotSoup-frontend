{"version":3,"file":"CocoaPodsPackageManager.js","sourceRoot":"","sources":["../src/CocoaPodsPackageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { existsSync } from 'fs';\nimport { Ora } from 'ora';\nimport os from 'os';\nimport path from 'path';\n\nimport { PackageManager, spawnSudoAsync } from './PackageManager';\n\nexport type CocoaPodsErrorCode = 'NON_INTERACTIVE' | 'NO_CLI' | 'COMMAND_FAILED';\n\nexport class CocoaPodsError extends Error {\n  readonly name = 'CocoaPodsError';\n  readonly isPackageManagerError = true;\n\n  constructor(message: string, public code: CocoaPodsErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.message}` : message);\n  }\n}\n\nexport function extractMissingDependencyError(errorOutput: string): [string, string] | null {\n  // [!] Unable to find a specification for `expo-dev-menu-interface` depended upon by `expo-dev-launcher`\n  const results = errorOutput.match(\n    /Unable to find a specification for ['\"`]([\\w-_\\d\\s]+)['\"`] depended upon by ['\"`]([\\w-_\\d\\s]+)['\"`]/\n  );\n  if (results) {\n    return [results[1], results[2]];\n  }\n  return null;\n}\n\nexport class CocoaPodsPackageManager implements PackageManager {\n  options: SpawnOptions;\n\n  private silent: boolean;\n\n  static getPodProjectRoot(projectRoot: string): string | null {\n    if (CocoaPodsPackageManager.isUsingPods(projectRoot)) return projectRoot;\n    const iosProject = path.join(projectRoot, 'ios');\n    if (CocoaPodsPackageManager.isUsingPods(iosProject)) return iosProject;\n    const macOsProject = path.join(projectRoot, 'macos');\n    if (CocoaPodsPackageManager.isUsingPods(macOsProject)) return macOsProject;\n    return null;\n  }\n\n  static isUsingPods(projectRoot: string): boolean {\n    return existsSync(path.join(projectRoot, 'Podfile'));\n  }\n\n  static async gemInstallCLIAsync(\n    nonInteractive: boolean = false,\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    const options = ['install', 'cocoapods', '--no-document'];\n\n    try {\n      // In case the user has run sudo before running the command we can properly install CocoaPods without prompting for an interaction.\n      await spawnAsync('gem', options, spawnOptions);\n    } catch (error: any) {\n      if (nonInteractive) {\n        throw new CocoaPodsError(\n          'Failed to install CocoaPods CLI with gem (recommended)',\n          'COMMAND_FAILED',\n          error\n        );\n      }\n      // If the user doesn't have permission then we can prompt them to use sudo.\n      await spawnSudoAsync(['gem', ...options], spawnOptions);\n    }\n  }\n\n  static async brewLinkCLIAsync(spawnOptions: SpawnOptions = { stdio: 'inherit' }): Promise<void> {\n    await spawnAsync('brew', ['link', 'cocoapods'], spawnOptions);\n  }\n\n  static async brewInstallCLIAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    await spawnAsync('brew', ['install', 'cocoapods'], spawnOptions);\n  }\n\n  static async installCLIAsync({\n    nonInteractive = false,\n    spawnOptions = { stdio: 'inherit' },\n  }: {\n    nonInteractive?: boolean;\n    spawnOptions?: SpawnOptions;\n  }): Promise<boolean> {\n    if (!spawnOptions) {\n      spawnOptions = { stdio: 'inherit' };\n    }\n    const silent = !!spawnOptions.ignoreStdio;\n\n    try {\n      !silent && console.log(`\\u203A Attempting to install CocoaPods CLI with Gem`);\n      await CocoaPodsPackageManager.gemInstallCLIAsync(nonInteractive, spawnOptions);\n      !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Gem`);\n      return true;\n    } catch (error: any) {\n      if (!silent) {\n        console.log(chalk.yellow(`\\u203A Failed to install CocoaPods CLI with Gem`));\n        console.log(chalk.red(error.stderr ?? error.message));\n        console.log(`\\u203A Attempting to install CocoaPods CLI with Homebrew`);\n      }\n      try {\n        await CocoaPodsPackageManager.brewInstallCLIAsync(spawnOptions);\n        if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n          try {\n            await CocoaPodsPackageManager.brewLinkCLIAsync(spawnOptions);\n            // Still not available after linking? Bail out\n            if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n              throw new CocoaPodsError(\n                'CLI could not be installed automatically with gem or Homebrew, please install CocoaPods manually and try again',\n                'NO_CLI',\n                error\n              );\n            }\n          } catch (error: any) {\n            throw new CocoaPodsError(\n              'Homebrew installation appeared to succeed but CocoaPods CLI not found in PATH and unable to link.',\n              'NO_CLI',\n              error\n            );\n          }\n        }\n\n        !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Homebrew`);\n        return true;\n      } catch (error: any) {\n        !silent &&\n          console.warn(\n            chalk.yellow(\n              `\\u203A Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`\n            )\n          );\n        throw new CocoaPodsError(\n          `Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`,\n          'NO_CLI',\n          error\n        );\n      }\n    }\n  }\n\n  static isAvailable(projectRoot: string, silent: boolean): boolean {\n    if (process.platform !== 'darwin') {\n      !silent && console.log(chalk.red('CocoaPods is only supported on macOS machines'));\n      return false;\n    }\n    if (!CocoaPodsPackageManager.isUsingPods(projectRoot)) {\n      !silent && console.log(chalk.yellow('CocoaPods is not supported in this project'));\n      return false;\n    }\n    return true;\n  }\n\n  static async isCLIInstalledAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<boolean> {\n    try {\n      await spawnAsync('pod', ['--version'], spawnOptions);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  constructor({ cwd, silent }: { cwd: string; silent?: boolean }) {\n    this.silent = !!silent;\n    this.options = {\n      cwd,\n      // We use pipe by default instead of inherit so that we can capture stderr/stdout and process it for errors.\n      // Later we'll also pipe the stdout/stderr to the terminal when silent is false.\n      stdio: 'pipe',\n    };\n  }\n\n  get name() {\n    return 'CocoaPods';\n  }\n\n  /** Runs `pod install` and attempts to automatically run known troubleshooting steps automatically. */\n  async installAsync({ spinner }: { spinner?: Ora } = {}) {\n    await this._installAsync({ spinner });\n  }\n\n  public isCLIInstalledAsync() {\n    return CocoaPodsPackageManager.isCLIInstalledAsync(this.options);\n  }\n\n  public installCLIAsync() {\n    return CocoaPodsPackageManager.installCLIAsync({\n      nonInteractive: true,\n      spawnOptions: this.options,\n    });\n  }\n\n  async handleInstallErrorAsync({\n    error,\n    shouldUpdate = true,\n    updatedPackages = [],\n    spinner,\n  }: {\n    error: any;\n    spinner?: Ora;\n    shouldUpdate?: boolean;\n    updatedPackages?: string[];\n  }) {\n    // Unknown errors are rethrown.\n    if (!error.output) {\n      throw error;\n    }\n\n    // To emulate a `pod install --repo-update` error, enter your `ios/Podfile.lock` and change one of `PODS` version numbers to some lower value.\n    // const isPodRepoUpdateError = shouldPodRepoUpdate(output);\n    if (!shouldUpdate) {\n      // If we can't automatically fix the error, we'll just rethrow it with some known troubleshooting info.\n      throw getImprovedPodInstallError(error, {\n        cwd: this.options.cwd,\n      });\n    }\n\n    // Collect all of the spawn info.\n    const errorOutput = error.output.join(os.EOL).trim();\n\n    // Extract useful information from the error message and push it to the spinner.\n    const { updatePackage, shouldUpdateRepo } = getPodUpdateMessage(errorOutput);\n\n    if (!updatePackage || updatedPackages.includes(updatePackage)) {\n      // `pod install --repo-update`...\n      // Attempt to install again but this time with install --repo-update enabled.\n      return await this._installAsync({\n        spinner,\n        shouldRepoUpdate: true,\n        // Include a boolean to ensure pod install --repo-update isn't invoked in the unlikely case where the pods fail to update.\n        shouldUpdate: false,\n        updatedPackages,\n      });\n    }\n    // Store the package we should update to prevent a loop.\n    updatedPackages.push(updatePackage);\n\n    // If a single package is broken, we'll try to update it.\n    // You can manually test this by changing a version number in your `Podfile.lock`.\n\n    // Attempt `pod update <package> <--no-repo-update>` and then try again.\n    return await this.runInstallTypeCommandAsync(\n      ['update', updatePackage, shouldUpdateRepo ? '' : '--no-repo-update'].filter(Boolean),\n      {\n        formatWarning() {\n          const updateMessage = `Failed to update ${chalk.bold(\n            updatePackage\n          )}. Attempting to update the repo instead.`;\n          return updateMessage;\n        },\n        spinner,\n        updatedPackages,\n      }\n    );\n    // // If update succeeds, we'll try to install again (skipping `pod install --repo-update`).\n    // return await this._installAsync({\n    //   spinner,\n    //   shouldUpdate: false,\n    //   updatedPackages,\n    // });\n  }\n\n  private async _installAsync({\n    shouldRepoUpdate,\n    ...props\n  }: {\n    spinner?: Ora;\n    shouldUpdate?: boolean;\n    updatedPackages?: string[];\n    shouldRepoUpdate?: boolean;\n  } = {}): Promise<SpawnResult> {\n    return await this.runInstallTypeCommandAsync(\n      ['install', shouldRepoUpdate ? '--repo-update' : ''].filter(Boolean),\n      {\n        formatWarning(error: any) {\n          // Extract useful information from the error message and push it to the spinner.\n          return getPodRepoUpdateMessage(error.output.join(os.EOL).trim()).message;\n        },\n        ...props,\n      }\n    );\n  }\n\n  private async runInstallTypeCommandAsync(\n    command: string[],\n    {\n      formatWarning,\n      ...props\n    }: {\n      formatWarning?: (error: Error) => string;\n      spinner?: Ora;\n      shouldUpdate?: boolean;\n      updatedPackages?: string[];\n    } = {}\n  ): Promise<SpawnResult> {\n    try {\n      return await this._runAsync(command);\n    } catch (error: any) {\n      if (formatWarning) {\n        const warning = formatWarning(error);\n        if (props.spinner) {\n          props.spinner.text = chalk.bold(warning);\n        }\n        if (!this.silent) {\n          console.warn(chalk.yellow(warning));\n        }\n      }\n\n      return await this.handleInstallErrorAsync({ error, ...props });\n    }\n  }\n\n  async addWithParametersAsync(names: string[], parameters: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async addAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async addDevAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async versionAsync() {\n    const { stdout } = await spawnAsync('pod', ['--version'], this.options);\n    return stdout.trim();\n  }\n\n  async getConfigAsync(key: string): Promise<string> {\n    throw new Error('Unimplemented');\n  }\n\n  async removeLockfileAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  async cleanAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  // Private\n  private async podRepoUpdateAsync(): Promise<void> {\n    try {\n      await this._runAsync(['repo', 'update']);\n    } catch (error: any) {\n      error.message = error.message || (error.stderr ?? error.stdout);\n\n      throw new CocoaPodsError(\n        'The command `pod install --repo-update` failed',\n        'COMMAND_FAILED',\n        error\n      );\n    }\n  }\n\n  // Exposed for testing\n  async _runAsync(args: string[]): Promise<SpawnResult> {\n    if (!this.silent) {\n      console.log(`> pod ${args.join(' ')}`);\n    }\n    const promise = spawnAsync(\n      'pod',\n      [\n        ...args,\n        // Enables colors while collecting output.\n        '--ansi',\n      ],\n      {\n        // Add the cwd and other options to the spawn options.\n        ...this.options,\n        // We use pipe by default instead of inherit so that we can capture stderr/stdout and process it for errors.\n        // This is particularly required for the `pod install --repo-update` error.\n\n        // Later we'll also pipe the stdout/stderr to the terminal when silent is false,\n        // currently this means we lose out on the ansi colors unless passing the `--ansi` flag to every command.\n        stdio: 'pipe',\n      }\n    );\n\n    if (!this.silent) {\n      // If not silent, pipe the stdout/stderr to the terminal.\n      // We only do this when the `stdio` is set to `pipe` (collect the results for parsing), `inherit` won't contain `promise.child`.\n      if (promise.child.stdout) {\n        promise.child.stdout.pipe(process.stdout);\n      }\n    }\n\n    return await promise;\n  }\n}\n\n/** When pods are outdated, they'll throw an error informing you to run \"pod install --repo-update\" */\nfunction shouldPodRepoUpdate(errorOutput: string) {\n  const output = errorOutput;\n  const isPodRepoUpdateError =\n    output.includes('pod repo update') || output.includes('--no-repo-update');\n  return isPodRepoUpdateError;\n}\n\nexport function getPodUpdateMessage(output: string) {\n  const props = output.match(\n    /run ['\"`]pod update ([\\w-_\\d/]+)( --no-repo-update)?['\"`] to apply changes/\n  );\n\n  return {\n    updatePackage: props?.[1] ?? null,\n    shouldUpdateRepo: !props?.[2],\n  };\n}\n\nexport function getPodRepoUpdateMessage(errorOutput: string) {\n  const warningInfo = extractMissingDependencyError(errorOutput);\n  const brokenPackage = getPodUpdateMessage(errorOutput);\n\n  let message: string;\n  if (warningInfo) {\n    message = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}.`;\n  } else if (brokenPackage?.updatePackage) {\n    message = `Couldn't install: ${brokenPackage?.updatePackage}.`;\n  } else {\n    message = `Couldn't install Pods.`;\n  }\n  message += ` Updating the Pods project and trying again...`;\n  return { message, ...brokenPackage };\n}\n\n/**\n * Format the CocoaPods CLI install error.\n *\n * @param error Error from CocoaPods CLI `pod install` command.\n * @returns\n */\nexport function getImprovedPodInstallError(\n  error: SpawnResult & Error,\n  { cwd = process.cwd() }: { cwd?: string }\n): Error {\n  // Collect all of the spawn info.\n  const errorOutput = error.output.join(os.EOL).trim();\n\n  if (error.stdout.match(/No [`'\"]Podfile[`'\"] found in the project directory/)) {\n    // Ran pod install but no Podfile was found.\n    error.message = `No Podfile found in directory: ${cwd}. Ensure CocoaPods is setup any try again.`;\n  } else if (shouldPodRepoUpdate(errorOutput)) {\n    // Ran pod install but the install --repo-update step failed.\n    const warningInfo = extractMissingDependencyError(errorOutput);\n    let reason: string;\n    if (warningInfo) {\n      reason = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}`;\n    } else {\n      reason = `This is often due to native package versions mismatching`;\n    }\n\n    // Attempt to provide a helpful message about the missing NPM dependency (containing a CocoaPod) since React Native\n    // developers will almost always be using autolinking and not interacting with CocoaPods directly.\n    let solution: string;\n    if (warningInfo?.[0]) {\n      // If the missing package is named `expo-dev-menu`, `react-native`, etc. then it might not be installed in the project.\n      if (warningInfo[0].match(/^(?:@?expo|@?react)(-|\\/)/)) {\n        solution = `Ensure the node module \"${warningInfo[0]}\" is installed in your project, then run 'npx pod-install' to try again.`;\n      } else {\n        solution = `Ensure the CocoaPod \"${warningInfo[0]}\" is installed in your project, then run 'npx pod-install' to try again.`;\n      }\n    } else {\n      // Brute force\n      solution = `Try deleting the 'ios/Pods' folder or the 'ios/Podfile.lock' file and running 'npx pod-install' to resolve.`;\n    }\n    error.message = `${reason}. ${solution}`;\n\n    // Attempt to provide the troubleshooting info from CocoaPods CLI at the bottom of the error message.\n    if (error.stdout) {\n      const cocoapodsDebugInfo = error.stdout.split(os.EOL);\n      // The troubleshooting info starts with `[!]`, capture everything after that.\n      const firstWarning = cocoapodsDebugInfo.findIndex(v => v.startsWith('[!]'));\n      if (firstWarning !== -1) {\n        const warning = cocoapodsDebugInfo.slice(firstWarning).join(os.EOL);\n        error.message += `\\n\\n${chalk.gray(warning)}`;\n      }\n    }\n    return new CocoaPodsError(\n      'Command `pod install --repo-update` failed.',\n      'COMMAND_FAILED',\n      error\n    );\n  } else {\n    let stderr: string | null = error.stderr.trim();\n\n    // CocoaPods CLI prints the useful error to stdout...\n    const usefulError = error.stdout.match(/\\[!\\]\\s((?:.|\\n)*)/)?.[1];\n\n    // If there is a useful error message then prune the less useful info.\n    if (usefulError) {\n      // Delete unhelpful CocoaPods CLI error message.\n      if (error.message?.match(/pod exited with non-zero code: 1/)) {\n        error.message = '';\n      }\n      stderr = null;\n    }\n\n    error.message = [usefulError, error.message, stderr].filter(Boolean).join('\\n');\n  }\n\n  return new CocoaPodsError('Command `pod install` failed.', 'COMMAND_FAILED', error);\n}\n"]}