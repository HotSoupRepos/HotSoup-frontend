{"version":3,"file":"getWatchFolders.js","sourceRoot":"","sources":["../src/getWatchFolders.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAuC;AACvC,oDAA4B;AAC5B,+BAAwC;AACxC,gDAAwB;AAExB,uDAAqD;AAErD;;;;GAIG;AACH,SAAgB,uBAAuB,CACrC,oBAA4B,EAC5B,cAAwB;IAExB,OAAO,cAAc;SAClB,GAAG,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAA,WAAQ,EAAC,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;YACnE,GAAG,EAAE,oBAAoB;YACzB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,CAAC,qCAAqC,CAAC;SAChD,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACf,IAAI;gBACF,mBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,OAAO,OAAO,CAAC;aAChB;YAAC,MAAM;gBACN,qEAAqE;aACtE;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;SACD,IAAI,EAAE;SACN,MAAM,CAAC,OAAO,CAAC;SACf,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,cAAI,CAAC,IAAI,CAAC,CAAW,CAAC,CAAC,CAAC;AACtC,CAAC;AAvBD,0DAuBC;AAED,SAAS,yBAAyB,CAAC,EAAE,UAAU,EAAO;IACpD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,UAAU,CAAC;KACnB;IAED,IAAA,gBAAM,EAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,EAAE,+DAA+D,CAAC,CAAC;IAE9F,OAAO,UAAU,CAAC,QAAQ,CAAC;AAC7B,CAAC;AAED;;;GAGG;AACH,SAAgB,mCAAmC,CAAC,oBAA4B;IAC9E,IAAI;QACF,MAAM,uBAAuB,GAAG,cAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;QAChF,0CAA0C;QAC1C,MAAM,eAAe,GAAG,mBAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAE/D,6FAA6F;QAC7F,MAAM,QAAQ,GAAG,yBAAyB,CAAC,eAAe,CAAC,CAAC;QAE5D,sDAAsD;QACtD,OAAO,uBAAuB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;KAChE;IAAC,MAAM;QACN,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAdD,kFAcC;AAED;;;GAGG;AACH,SAAgB,eAAe,CAAC,WAAmB;IACjD,MAAM,aAAa,GAAG,IAAA,kCAAgB,EAAC,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAClE,iDAAiD;IACjD,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,QAAQ,GAAG,mCAAmC,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;QACpB,OAAO,EAAE,CAAC;KACX;IAED,OAAO,WAAW,CAAC;QACjB,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC;QACxC,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,cAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC1C,CAAC,CAAC;AACL,CAAC;AAhBD,0CAgBC;AAED,SAAS,WAAW,CAAC,KAAe;IAClC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { getWorkspaceRoot } from './getModulesPaths';\n\n/**\n * @param workspaceProjectRoot Root file path for the yarn workspace\n * @param linkedPackages List of folders that contain linked node modules, ex: `['packages/*', 'apps/*']`\n * @returns List of valid package.json file paths, ex: `['/Users/me/app/apps/my-app/package.json', '/Users/me/app/packages/my-package/package.json']`\n */\nexport function globAllPackageJsonPaths(\n  workspaceProjectRoot: string,\n  linkedPackages: string[]\n): string[] {\n  return linkedPackages\n    .map(glob => {\n      return globSync(path.join(glob, 'package.json').replace(/\\\\/g, '/'), {\n        cwd: workspaceProjectRoot,\n        absolute: true,\n        ignore: ['**/@(Carthage|Pods|node_modules)/**'],\n      }).map(pkgPath => {\n        try {\n          JsonFile.read(pkgPath);\n          return pkgPath;\n        } catch {\n          // Skip adding path if the package.json is invalid or cannot be read.\n        }\n        return null;\n      });\n    })\n    .flat()\n    .filter(Boolean)\n    .map(p => path.join(p as string));\n}\n\nfunction getWorkspacePackagesArray({ workspaces }: any): string[] {\n  if (Array.isArray(workspaces)) {\n    return workspaces;\n  }\n\n  assert(workspaces?.packages, 'Could not find a `workspaces` object in the root package.json');\n\n  return workspaces.packages;\n}\n\n/**\n * @param workspaceProjectRoot root file path for a yarn workspace.\n * @returns list of package.json file paths that are linked to the yarn workspace.\n */\nexport function resolveAllWorkspacePackageJsonPaths(workspaceProjectRoot: string) {\n  try {\n    const rootPackageJsonFilePath = path.join(workspaceProjectRoot, 'package.json');\n    // Could throw if package.json is invalid.\n    const rootPackageJson = JsonFile.read(rootPackageJsonFilePath);\n\n    // Extract the \"packages\" array or use \"workspaces\" as packages array (yarn workspaces spec).\n    const packages = getWorkspacePackagesArray(rootPackageJson);\n\n    // Glob all package.json files and return valid paths.\n    return globAllPackageJsonPaths(workspaceProjectRoot, packages);\n  } catch {\n    return [];\n  }\n}\n\n/**\n * @param projectRoot file path to app's project root\n * @returns list of node module paths to watch in Metro bundler, ex: `['/Users/me/app/node_modules/', '/Users/me/app/apps/my-app/', '/Users/me/app/packages/my-package/']`\n */\nexport function getWatchFolders(projectRoot: string): string[] {\n  const workspaceRoot = getWorkspaceRoot(path.resolve(projectRoot));\n  // Rely on default behavior in standard projects.\n  if (!workspaceRoot) {\n    return [];\n  }\n\n  const packages = resolveAllWorkspacePackageJsonPaths(workspaceRoot);\n  if (!packages.length) {\n    return [];\n  }\n\n  return uniqueItems([\n    path.join(workspaceRoot, 'node_modules'),\n    ...packages.map(pkg => path.dirname(pkg)),\n  ]);\n}\n\nfunction uniqueItems(items: string[]): string[] {\n  return [...new Set(items)];\n}\n"]}